<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Browser Rendering</title>
      <link href="/blog/2019/11/24/others/browser-rendering/"/>
      <url>/blog/2019/11/24/others/browser-rendering/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><h2 id="从-HTML-原始字节到-DOM"><a href="#从-HTML-原始字节到-DOM" class="headerlink" title="从 HTML 原始字节到 DOM"></a>从 HTML 原始字节到 DOM</h2><p>Bytes =&gt; Charaters =&gt; Tokens =&gt; Node =&gt; DOM</p><ul><li><p>what is <code>token</code>?</p><ul><li>Essentially, an html file is broken down into small units of parsing called tokens.This is how the browser begins to understand whate you’ve written.</li></ul></li><li><p><code>node</code> is a separate entity within the document object tree</p></li><li><p>The <code>DOM</code> establishes the parent-child relationships, adjacent sibling relationships etc.</p></li></ul><h2 id="从-CSS-原始字节到-CSSOM"><a href="#从-CSS-原始字节到-CSSOM" class="headerlink" title="从 CSS 原始字节到 CSSOM"></a>从 CSS 原始字节到 CSSOM</h2><p>浏览器是从 <code>html</code> 开始解析的，当发现 <code>link</code> 标签时，会开辟一个线程去发起请求取css文件数据。DOM 的构建仍会继续</p><p>生成 CSSOM 的过程与 DOM 一样<br>Bytes =&gt; Charaters =&gt; Tokens =&gt; Nodes =&gt; CSSOM</p><p>css 有时叫做 Cascade 是因为浏览器会迭代遍历 css 树结构来确定影响某个元素的样式（子元素的样式会受其父元素样式的影响）</p><h2 id="The-render-tree"><a href="#The-render-tree" class="headerlink" title="The render tree"></a>The render tree</h2><p>DOM 和 CSSOM 是两个独立的树形结构，DOM 包含有关页面HTML元素关系的所有信息，而 CSSOM 包含有关元素的样式信息。把 DOM 和 CSSOM 结合在一起就是 Render Tree</p><p>Render Tree 包含页面上所有可见 DOM 内容的信息，以及不同节点所需的所有 CSSOM 信息。<br>注意：<code>dispaly: none</code> 的元素不存在 Render Tree 中，但存在 DOM 中</p><h2 id="Lay’em-Out-and-Paint"><a href="#Lay’em-Out-and-Paint" class="headerlink" title="Lay’em Out and Paint"></a>Lay’em Out and Paint</h2><p>浏览器根据浏览器视窗计算每个元素的具体大小和位置，这个步骤考虑到从 DOM 和<br>CSSOM 接收到的内容和样式，并完成所有必要的布局计算，这个过程也叫做回流(reflow)</p><p>最后一步，就是把节点绘制到屏幕上</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><p>当解析器遇到 <code>script</code> 标签时，DOM 的构建会被停止，直到 script 代码执行完毕。当放到头部的 js 代码涉及到 DOM 操作时就会失败，这是因为body 标签及其内容还没有被解析到。这也是为什么 script 标签放到 body 标签底部的原因。</p></li><li><p>那么当解析到 script 标签，CSSOM 还没有准备好会怎样呢？</p><ul><li>The javascript execution will be halted until the CSSOM is ready.</li><li>With the CSSOM, the JS execution waits. No CSSOM, no JS execution.</li></ul></li></ul><h2 id="async-属性"><a href="#async-属性" class="headerlink" title="async 属性"></a>async 属性</h2><p>把 <code>async</code> 关键字添加到 <code>script</code> 标签, 其作用是：DOM 的构建不会停止，script 下载完成后执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://some-link-to-app.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>DOM: Document Object Model, 浏览器将HTML解析成的树形数据结构。</p></li><li><p>CSSOM: CSS Object Model, 浏览器将CSS解析成的树形数据结构。</p></li><li><p>Render Tree: DOM 和 CSSOM 合并生成的Render Tree。</p></li><li><p>Layout: 计算出 Render Tree 每个节点的具体位置。</p></li><li><p>Painting: 通过显卡，将 Layout 后的节点内容分别呈现到屏幕上。</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>当我们浏览器获得HTML文件后，会自上而下的加载，并在加载过程中进行解析和渲染。</p></li><li><p>加载说的就是获取资源文件的过程，如果在加载过程中遇到外部CSS文件和图片，浏览器会另外发送一个请求，去获取CSS文件和相应的图片，这个请求是异步的，并不会影响HTML文件的加载。</p></li><li><p>但是如果遇到Javascript文件，HTML文件会挂起渲染的进程，等待JavaScript文件加载完毕后，再继续进行渲染。<br>为什么HTML需要等待JavaScript呢？因为JavaScript可能会修改DOM，导致后续HTML资源白白加载，所以HTML必须等待JavaScript文件加载完毕后，再继续渲染，这也就是为什么JavaScript文件在写在底部body标签前的原因。</p></li></ul><h2 id="DOM的重绘-Repaint-与回流-Reflow"><a href="#DOM的重绘-Repaint-与回流-Reflow" class="headerlink" title="DOM的重绘(Repaint)与回流(Reflow)"></a>DOM的重绘(Repaint)与回流(Reflow)</h2><ul><li><p>重绘：元素样式的改变（但宽度、大小、位置等不变）</p></li><li><p>回流：元素的大小或者位置发生了变化（当页面布局和几何信息发生变化时），触发了重新布局导致渲染树重新计算布局和渲染，还有，因为回流是根据视口的大小来计算元素的位置和大小的，所以浏览器的窗口尺寸变化也会引发回流</p></li></ul><p>注意：回流一定会触发重绘，而重绘不一定会回流</p><p>参考：<br><a href="https://blog.logrocket.com/" target="_blank" rel="noopener">https://blog.logrocket.com/</a> how-browser-rendering-works-behind-the-scenes-6782b0e8fb10/<br><a href="https://www.jianshu.com/p/05eb1b17b298" target="_blank" rel="noopener">https://www.jianshu.com/p/05eb1b17b298</a><br><a href="https://youtu.be/SmE4OwHztCc" target="_blank" rel="noopener">https://youtu.be/SmE4OwHztCc</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs的特点</title>
      <link href="/blog/2019/10/31/node/node-feature/"/>
      <url>/blog/2019/10/31/node/node-feature/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><h2 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h2><p>Node.js is a JavaScript runtime built on <strong><em>Chrome’sV8 JavaScript engine</em></strong>. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficent. Node.js’package ecosystem, <strong><em>npm</em></strong>, is the largest ecosystem of open source libraries in the world.</p><h2 id="nodejs特点"><a href="#nodejs特点" class="headerlink" title="nodejs特点"></a>nodejs特点</h2><ul><li>单线程</li><li>非阻塞I/O</li><li>事件驱动<a id="more"></a><h3 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h3>在Java、PHP或者.net等服务器语言中，会为每一个客户端连接创建一个新的 进程。而每个线程需要耗费大约2MB内存。也就是说理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。</li></ul><p>Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序上宏观上也是并行的。使用Node.js，一个8GB内存的服务器，可以同时处理超过4万用户的连接。另外，单线程带来的好处还有，操作系统完全不再有线程创建、销毁的时间开销。</p><img src="/blog/2019/10/31/node/node-feature/thread.png" height="300"><h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I/O"></a>非阻塞 I/O</h3><p>在传统的单线程处理机制中，在执行了访问数据库代码之后，整个线程都将暂停下来，等待数据库返回结果，才能执行后面的代码。也就是说，I/O阻塞了代码的执行，极大地降低了程序的执行效率。</p><p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。</p><p>当某个I/O执行完毕时，将以事件形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。</p><p>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>在Node中，客户端请求建立连接，提交数据等行为，会触发响应的事件；在每一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数中途，可以转而处理其他事件（比如，新用户连接），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</p><p>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。</p><img src="/blog/2019/10/31/node/node-feature/event.png" height="300"><h2 id="适合开发什么？"><a href="#适合开发什么？" class="headerlink" title="适合开发什么？"></a>适合开发什么？</h2><p>善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也是相当于这个计算阻塞了这个单线程，就不适合Node开发。</p><p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与websocket配合，开发长连接的实时交互应用。</p><p>比如：</p><ul><li>用户表单收集</li><li>考试系统</li><li>聊天室</li><li>图文直播</li><li>提供 JSON 的 API （为前台Angular使用）</li></ul><h2 id="比之老牌后台语言"><a href="#比之老牌后台语言" class="headerlink" title="比之老牌后台语言"></a>比之老牌后台语言</h2><p>Node.js本就是极客追求性能极致的产物，缺少了很多服务器的键状性考量。所以Node不可能应用在银行、证券、电信等需要极高可靠性的业务中。</p><p>中国的企业实战中，创业型公司（正处于A轮、B轮）非常爱使用Node做核心任务：</p><ul><li>功夫熊的APP，后台是Node.js在伺服</li><li>实现网，整站都为Node.js搭建</li></ul><p>成熟大企业，基本上都是用Node实现某一方面的功能：</p><ul><li>知乎用了一个Node进程，跑起了“站内信”功能</li><li>百度的很多表单，是用Node保存到数据库的</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Hello World</title>
      <link href="/blog/2019/10/31/hexo/"/>
      <url>/blog/2019/10/31/hexo/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生node api笔记</title>
      <link href="/blog/2019/10/31/node/node-api/"/>
      <url>/blog/2019/10/31/node/node-api/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><h2 id="产生唯一-id"><a href="#产生唯一-id" class="headerlink" title="产生唯一 id"></a>产生唯一 id</h2><p><code>npm i uuid -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(uuid().replace(<span class="regexp">/\-/g</span>, <span class="string">''</span>)) <span class="comment">// 把所有的 - 去掉</span></span><br></pre></td></tr></table></figure><h2 id="获取-后缀名"><a href="#获取-后缀名" class="headerlink" title="获取 后缀名"></a>获取 后缀名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> ext = path.extname(<span class="string">'xx.txt'</span>) <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><ol><li>减少内存占用、增强系统性能（利用率高）</li><li>分3种：读取、写入、读写<ul><li>读取流：req、fs.createReadStream</li><li>写入流：res、fs.createWriteStream</li><li>读写流：zlib.createGzip</li></ul></li><li>把压缩文件发送到浏览器，需要设置响应头<ul><li>res.setHeader(‘Content-Encoding’, ‘gzip’)<a id="more"></a></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line"><span class="comment">// 读写流：压缩，加密</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'www/1.html'</span>) <span class="comment">// 读取流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'www/2.html.gz'</span>) <span class="comment">// 写入流</span></span><br><span class="line"></span><br><span class="line">rs.pipe(gz).pipe(ws)</span><br><span class="line">rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-事件队列"><a href="#EventEmitter-事件队列" class="headerlink" title="EventEmitter 事件队列"></a>EventEmitter 事件队列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Event = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ev = <span class="keyword">new</span> Event()</span><br><span class="line"><span class="comment">// ev监听</span></span><br><span class="line">ev.on(<span class="string">'blu'</span>, (a, b, c) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到了'</span>, a, b, c)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ev触发</span></span><br><span class="line">ev.emit(<span class="string">'blu'</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 返回值为是否有对应监听</span></span><br></pre></td></tr></table></figure><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>)</span><br><span class="line"><span class="keyword">let</span> ip = <span class="string">''</span></span><br><span class="line">dns.lookup(<span class="string">'www.badu.com'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wrong'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ip = data</span><br><span class="line">        <span class="built_in">console</span>.log(data) <span class="comment">//输出百度的ip地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">dns.lookupService(ip, <span class="number">80</span>, (err, data) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">let</span> arr = os.cpus() <span class="comment">// cpu 信息</span></span><br><span class="line"><span class="keyword">let</span> free = os.freemem() <span class="comment">// 空闲内存</span></span><br></pre></td></tr></table></figure><h2 id="Assertion-调试"><a href="#Assertion-调试" class="headerlink" title="Assertion 调试"></a>Assertion 调试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> a == <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> b == <span class="string">'number'</span>, <span class="string">'都得是数字'</span>)</span><br><span class="line">    assert(b != <span class="number">0</span>, <span class="string">'分母不能为0'</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(divide(a, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="Crypto-加密"><a href="#Crypto-加密" class="headerlink" title="Crypto 加密"></a>Crypto 加密</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = requrie(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">let</span> hash = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">hash.update(<span class="string">'sdl'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure><h2 id="Child-Process-多进程"><a href="#Child-Process-多进程" class="headerlink" title="Child Process 多进程"></a>Child Process 多进程</h2><p>Cluster<br>Process</p><ul><li>只有系统才能完全全新创造进程</li><li>一个程序可以通过复制自己创造新的进程</li><li>子进程不能再创造进程</li><li>主进程和子进程之间能够共享句柄(socket端口)</li></ul><pre><code class="js"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)<span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)<span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>) <span class="comment">// 进程信息</span><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)<span class="keyword">if</span> (cluster.isMaster) { <span class="comment">// 判断是否为主进程，若是主进程则分裂子进程</span>    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) {        cluster.fork()     }    <span class="built_in">console</span>.log(<span class="string">'主进程'</span>)} <span class="keyword">else</span> {    http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> {        <span class="built_in">console</span>.log(<span class="string">`工作进程#<span class="subst">${process.pid}</span>`</span>)    }).listen(<span class="number">3000</span>)}</code></pre><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js试题</title>
      <link href="/blog/2019/09/18/js/js-exam/"/>
      <url>/blog/2019/09/18/js/js-exam/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>console.profile()</code> 在火狐浏览器中安装 <code>FireBug</code> 可以更精确的获取到程序每一个步骤所消耗的时间</p><p><code>console.time()</code> 也可以测试一段程序执行的时间，使用的比较多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'A'</span>)</span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'A'</span>)</span><br></pre></td></tr></table></figure><h2 id="call-和-apply-的区别"><a href="#call-和-apply-的区别" class="headerlink" title="call 和 apply 的区别"></a>call 和 apply 的区别</h2><p><code>fn.call(obj, 1, 2, 3)</code><br><code>fn.apply(obj, [1, 2, 3])</code></p><ol><li><code>call</code>，<code>apply</code> 都是 <code>function</code> 原型链上的函数，都可改变该函数内的 <code>this</code> 指针的指向</li><li>传参的形式不同，<code>call</code> 是一个一个来传，而 <code>apply</code> 是以数组的形式来传</li><li><code>call</code> 在性能上比 <code>apply</code> 好，特别是参数 大于 3 的情况下</li><li>它们与 <code>bind</code> 的区别是，<code>bind</code> 只改变 <code>this</code> 指针的指向，而不立刻执行<a id="more"></a></li></ol><h2 id="实现-5-add-3-minus-2"><a href="#实现-5-add-3-minus-2" class="headerlink" title="实现 (5).add(3).minus(2)"></a>实现 (5).add(3).minus(2)</h2><ul><li>把 <code>add()</code> 和 <code>minus()</code> 函数挂载到 Number 的原型链上</li><li>同时，每个方法执行完，都要返回 Number 这个类的实例，这样才可以链式调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = <span class="built_in">Number</span>(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isNaN</span>(n) ? <span class="number">0</span> : n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = check(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> + n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = check(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> - n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Number</span>.prototype.add = add</span><br><span class="line">    <span class="built_in">Number</span>.prototype.minus = minus</span><br><span class="line">    <span class="comment">// 懒人写法</span></span><br><span class="line">    <span class="comment">// ["add", "minus"].forEach(item =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     Number.prototype[item] = eval(item)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数-与-普通函数的区别？"><a href="#箭头函数-与-普通函数的区别？" class="headerlink" title="箭头函数 与 普通函数的区别？"></a>箭头函数 与 普通函数的区别？</h2><ol><li>语法上，箭头函数比普通函数更加简洁</li><li>箭头函数没有自己的 <code>this</code>，它里面出现的 <code>this</code> 继承函数所处上下文的 <code>this</code> （使用 <code>call/apply</code> 方式都无法改变 <code>this</code> 的指向）</li><li>箭头函数中没有 <code>arguments</code> (类数组), 只能基于 …arg 获取传递参数集合（数组）</li><li>箭头函数不能被 new 执行，（因为：箭头函数没有 this 也没有 prototype）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// THIS: WINDOW</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// THIS: BODY</span></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// THIS: WINDOW 回调函数的 THIS 一般都是 WINDOW</span></span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//  THIS: BODY</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数：把一个函数作为实参传递给另一个函数</span></span><br></pre></td></tr></table></figure><h2 id="如何把一个字符串中的大小写取反？"><a href="#如何把一个字符串中的大小写取反？" class="headerlink" title="如何把一个字符串中的大小写取反？"></a>如何把一个字符串中的大小写取反？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"My GOODword"</span></span><br><span class="line">str = str.replace(<span class="regexp">/[a-zA-Z]/g</span>, content =&gt; &#123;</span><br><span class="line">    <span class="comment">// 两种方法</span></span><br><span class="line">    <span class="comment">// 1. content.toUpperCase() === content</span></span><br><span class="line">    <span class="comment">// 2. content.cahrCodeAt() &gt;= 65 &amp;&amp; content.charCodeAt() &lt;= 90&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content.toUpperCase() === content ? content.toLowerCase() : content.toUpperCase()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现一个字符串匹配算法，类似于-indexOf"><a href="#实现一个字符串匹配算法，类似于-indexOf" class="headerlink" title="实现一个字符串匹配算法，类似于 indexOf"></a>实现一个字符串匹配算法，类似于 indexOf</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> lenT = T.length,</span><br><span class="line">            lenS = <span class="keyword">this</span>.length,</span><br><span class="line">            res = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> (lenT &gt; lenS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= lenS - lenT; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> char = <span class="keyword">this</span>[i]</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.substr(i, lenT) === T) &#123;</span><br><span class="line">                res = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(T), </span><br><span class="line">            res = reg.exec(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> res === <span class="literal">null</span> ? <span class="number">-1</span> : res.index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>.prototype.myIndexOf = myIndexOf</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> S = <span class="string">"sdlfldping"</span>,</span><br><span class="line">    T = <span class="string">"pin"</span></span><br><span class="line"><span class="built_in">console</span>.log(S.myIndexOf(T))</span><br></pre></td></tr></table></figure><h2 id="输出下面代码运行结果"><a href="#输出下面代码运行结果" class="headerlink" title="输出下面代码运行结果"></a>输出下面代码运行结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="string">'123'</span>, c = <span class="number">123</span></span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; c 因为: a["123"] &lt;=&gt; a[123]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="built_in">Symbol</span>(<span class="string">'123'</span>), c = <span class="built_in">Symbol</span>(<span class="string">'123'</span>)</span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; b ，Symbol是 ES6 中新增的数据类型，它创建出来的值是唯一值，Symbol('123') === Symbol('123') 为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 3</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = &#123;<span class="attr">key</span>: <span class="string">'123'</span>&#125;, c = &#123;<span class="attr">key</span>: <span class="string">'456'</span>&#125;</span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; c</span></span><br><span class="line"><span class="comment">// 1. 对象的属性名不能是一个对象（遇到对象属性名，会默认转换为字符串）</span></span><br><span class="line"><span class="comment">// obj=&#123;&#125; arr=[12,23] obj[arr]='hello' obj=&gt;&#123;'12,23':'hello'&#125;</span></span><br><span class="line"><span class="comment">// 2. 普通对象.toString() 调取的是 Object.prototype 上的方法（这个方法是用来检测数据类型的）</span></span><br><span class="line"><span class="comment">// obj=&#123;&#125; obj.toString()=&gt;"[object Object]"</span></span><br></pre></td></tr></table></figure><h2 id="验证是否符合-URL-网址格式"><a href="#验证是否符合-URL-网址格式" class="headerlink" title="验证是否符合 URL 网址格式"></a>验证是否符合 URL 网址格式</h2><ol><li>协议：http/https/ftp</li><li>域名：<a href="http://www.xxx.xx、xxx.xx、kbs.sports.qq.com.cn" target="_blank" rel="noopener">www.xxx.xx、xxx.xx、kbs.sports.qq.com.cn</a></li><li>请求路径:<br>/<br>/index.html<br>/stu/index.html<br>/stu/</li><li>问号传参：?xx=xx&amp;xx=xx</li><li>哈希值：#xx</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"http://www.baidu.com/index.html?lx=1&amp;from=we#vieo"</span>  </span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(?:(http|https|ftp):\/\/)?((?:[\w-]+\.)+[a-z0-9]+)((?:\/[^/?#]*)+)?(\?[^#]+)?(#.+)?$/i</span> <span class="comment">// ?: 只匹配不捕获</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str))</span><br></pre></td></tr></table></figure><h2 id="对象问题"><a href="#对象问题" class="headerlink" title="对象问题"></a>对象问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把Foo当作类，在原型上设置实例公有的属性 =&gt; 实例.a()</span></span><br><span class="line">Foo.prototype.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把Foo当作普通对象设置私有的属性方法 =&gt; Foo.a()</span></span><br><span class="line">Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">Foo.a() <span class="comment">//=&gt;4</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo() <span class="comment">// Foo.a:f=&gt;1 obj.a:f=&gt;2</span></span><br><span class="line">obj.a() <span class="comment">//=&gt;2</span></span><br><span class="line">Foo.a() <span class="comment">//=&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="编写代码实现图片的懒加载"><a href="#编写代码实现图片的懒加载" class="headerlink" title="编写代码实现图片的懒加载"></a>编写代码实现图片的懒加载</h2><ul><li>前端性能优化的重要方案，<ul><li>通过图片或者数据的延迟加载，可以加快页面渲染速度，让第一次打开页面的速度变快</li><li>只有滑动到某个区域，我们才加载真实的图片，这样也可以节省加载的流量</li></ul></li><li>处理方案<ul><li>把所有需要延迟加载的图片用一个盒子包起来，设置宽高和默认占位符</li><li>开始让所有的 IMG 的 SRC 为空，把真实图片的地址放到 IMG 的自定义属性上，让 IMG 隐藏</li><li>等到所有其它资源都加载完成后，再开始加载图片</li><li>对于很多图片，需要当页面滚动的时候，当前图片区域完全显示出来后再加载真实图片</li><li>…</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片的延迟加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            width: 800px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.imgBox</span> &#123;</span></span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">            height: 450px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bbb</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.imgBox</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">data-img</span>=<span class="string">"./img/wallhaven-367257.jpg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/delayimgs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $container = $(<span class="string">'.container'</span>),</span><br><span class="line">    $imgBoxs = <span class="literal">null</span>,</span><br><span class="line">    $<span class="built_in">window</span> = $(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建长度为 20 的数组，每一项用 null 填充</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">``</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">null</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="comment">// fill() 是 es6的语法</span></span><br><span class="line">    str += <span class="string">`&lt;div class="imgBox"&gt;</span></span><br><span class="line"><span class="string">            &lt;img src="" alt="" data-img="./img/wallhaven-367257.jpg"&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$container.html(str)</span><br><span class="line">$imgBoxs = $container.children(<span class="string">'.imgBox'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多张图片延迟加载</span></span><br><span class="line">$<span class="built_in">window</span>.on(<span class="string">'load scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取浏览器底边框距离body的距离</span></span><br><span class="line">    <span class="keyword">let</span> $B = $<span class="built_in">window</span>.outerHeight() + $<span class="built_in">window</span>.scrollTop()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环每一个图片区域，根据自己区域距离body的距离，计算处理里面的图片是否加载</span></span><br><span class="line">    $imgBoxs.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> $item = $(item),</span><br><span class="line">            $itemA = $item.outerHeight() + $item.offset().top, </span><br><span class="line">            isLoad = $item.attr(<span class="string">'isLoad'</span>)</span><br><span class="line">        <span class="keyword">if</span> ($itemA &lt;= $B &amp;&amp; isLoad !== <span class="string">'true'</span>) &#123;</span><br><span class="line">            $item.attr(<span class="string">'isLoad'</span>, <span class="literal">true</span>) </span><br><span class="line">            <span class="keyword">let</span> $img = $item.children(<span class="string">'img'</span>)</span><br><span class="line">            <span class="comment">// 加载当前区域中的图片</span></span><br><span class="line">            $img.attr(<span class="string">'src'</span>, $img.attr(<span class="string">'data-img'</span>))</span><br><span class="line">            $img.on(<span class="string">'load'</span>, () =&gt; $img.stop().fadeIn())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="正则：一个6-16位的字符串，必须同时包含有大小写字母和数字"><a href="#正则：一个6-16位的字符串，必须同时包含有大小写字母和数字" class="headerlink" title="正则：一个6-16位的字符串，必须同时包含有大小写字母和数字"></a>正则：一个6-16位的字符串，必须同时包含有大小写字母和数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个6-16位的字符串，必须同时包含有大小写字母和数字</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)(?!^[0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个1-10为以数字字母下划线组成的字符串，必须包含下划线</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/(?=.*_.*)^\w&#123;1,10&#125;$/</span></span><br></pre></td></tr></table></figure><h2 id="正向预查和负向预查"><a href="#正向预查和负向预查" class="headerlink" title="正向预查和负向预查"></a>正向预查和负向预查</h2><h3 id="正向预查-pattern"><a href="#正向预查-pattern" class="headerlink" title="正向预查 (?=pattern)"></a>正向预查 (?=pattern)</h3><p>所谓正向预查，就是要匹配的字符串，必须满足pattern这个条件，我们知道正则表达式/cainiao/会匹配cainiao。同样也会匹配cainiao9中的cainiao。但是我们可能希望，cainiao只能匹配cainiao8中的cainiao。这个时候就可以这样小写：<code>/cainiao(?=8)/</code>，看两个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?=8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao9'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?=8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao8'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; cainiao</span></span><br><span class="line"><span class="comment">// 注意：括号里的内容只是条件，并不参与真正的捕获，只是检查后面的字符是否符合要求而已</span></span><br></pre></td></tr></table></figure><h3 id="负向预查-pattern"><a href="#负向预查-pattern" class="headerlink" title="负向预查 (?!pattern)"></a>负向预查 (?!pattern)</h3><p>和(?=pattern)相反，做匹配时，必须不满足pattern这个条件，还拿上面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?!8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao8'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; null，后面不能紧跟8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?!8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao9'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; cainiao</span></span><br></pre></td></tr></table></figure><p>下面的两个表达式，表示的是一个意思<br><code>var reg1 = /(?=^)\d{2}(?=$)/</code><br><code>var reg2 = /^\d{2}$/</code></p><h2 id="attr-prop-val-属性选择器"><a href="#attr-prop-val-属性选择器" class="headerlink" title="$attr(prop,val) 属性选择器"></a>$attr(prop,val) 属性选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中所有class为box的元素</span></span><br><span class="line"><span class="keyword">let</span> arr = $attr(<span class="string">'class'</span>, <span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$attr</span>(<span class="params">prop, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前页面中所有的标签 </span></span><br><span class="line">    <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>),</span><br><span class="line">        arr = []</span><br><span class="line">    <span class="comment">// [].forEach.call(elements, item =&gt; &#123;&#125;)</span></span><br><span class="line">    elements = <span class="built_in">Array</span>.from(elements) <span class="comment">// 把非数组转换为数组</span></span><br><span class="line">    elements.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 存储的是当前元素prop对应的属性值</span></span><br><span class="line">        <span class="keyword">let</span> itemValue = item.getAttribute(prop)</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">'class'</span>) &#123; <span class="comment">// 属性为class的进行特殊处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + val + <span class="string">"\\b"</span>).test(itemValue) ? arr.push(item) : <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (itemValue === val) &#123;</span><br><span class="line">            arr.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'no做no带'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/ig</span></span><br><span class="line">str = str.replace(reg, value =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>+ value +<span class="string">" "</span></span><br><span class="line">&#125;).trim()</span><br></pre></td></tr></table></figure><h2 id="编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组"><a href="#编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组" class="headerlink" title="编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1: Array.prototype.flat 展开</span></span><br><span class="line"><span class="comment">// [...new Set(arr)] new Set()去重</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr.flat(<span class="literal">Infinity</span>))).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2： 数组不管多少级，toString之后都会变成以逗号分隔的字符串</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：JSON.stringify 也可以扁平化数组</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">''</span>).split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：基于数组的some方法进行检测</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr]</span><br><span class="line"><span class="keyword">while</span> (arr4.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr4 = [].concat(...arr4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法5：递归处理</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFlat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = [],</span><br><span class="line">            _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> fn = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> item = arr[i]</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">                    fn(item)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fn(_this)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.myFlat = myFlat</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">let</span> arr5 = arr.myFlat()</span><br></pre></td></tr></table></figure><h2 id="实现一个-new方法，模拟内置new"><a href="#实现一个-new方法，模拟内置new" class="headerlink" title="实现一个_new方法，模拟内置new"></a>实现一个_new方法，模拟内置new</h2><p>分析<br><code>let dah = new Dog(&#39;大黄&#39;)</code></p><ol><li>像普通函数执行一样，形成一个私有的作用域<ul><li>形参赋值</li><li>变量提升</li></ul></li><li>默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前类的一个实例</li><li>代码执行</li><li>默认把创建的对象返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bark ...........'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fn --- 当前要 new 的类</span></span><br><span class="line"><span class="comment">// ...arg 后期给构造函数传递参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">Fn, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let obj = &#123;&#125;</span></span><br><span class="line">    <span class="comment">// obj.__proto__ = Fn.prototype</span></span><br><span class="line">    <span class="comment">// 上面两句可以这样写</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Fn.prototype)</span><br><span class="line">    Fn.call(obj, ...arg)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dah = _new(Dog, <span class="string">'大黄'</span>)</span><br></pre></td></tr></table></figure><h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>]</span><br><span class="line"><span class="comment">//=&gt; 合并后的数组为：['A1', 'A2', 'A', 'B1' 'B2', 'B', 'C1', 'C2', 'C', 'D1', 'D2']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：若arr1是升序数组</span></span><br><span class="line"> <span class="keyword">let</span> mixArr1 = arr2.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">'zz'</span>).concat(arr1).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).map(<span class="function"><span class="params">item</span> =&gt;</span> item.replace(<span class="string">'zz'</span>, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：若arr1是无序的 </span></span><br><span class="line">arr1 = [<span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>]</span><br><span class="line"><span class="keyword">let</span> mixArr2 = [...arr1]</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item2 = arr2[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; mixArr2.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item1 = mixArr2[j]</span><br><span class="line">        <span class="keyword">if</span> (item1.includes(item2)) &#123;</span><br><span class="line">            n = j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mixArr2.splice(n + <span class="number">1</span>, <span class="number">0</span>, item2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器是异步编程：每一轮循环设置定时器，无需等定时器触发执行，继续下一轮循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>) <span class="comment">//=&gt; 输出10次10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让其一秒后输出连续的 0~9 可有以下几种方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：let 存在块级作用域，每一次循环都会在当前作用域中形成一个私有变量i存储0~9</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：使用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    ~ <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>) </span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：闭包2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function">(<span class="params">i =&gt; (</span>) =&gt;</span> <span class="built_in">console</span>.log(i))(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：基于 bind 的预先处理机制，在循环的时候把每次执行函数需要输出的结果，预先传递给函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(fn.bind(<span class="literal">null</span>, i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><ol><li>本应匿名的函数如果设置了函数名，在外面还是无法调用，但是在函数里面是可以使用的</li><li>而且类似于创建常量一样，这个名字存储的值不能再被修改（非严格模式下不报错，但是不会有任何效果，严格模式下会报错）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">AAA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//"use strict"</span></span><br><span class="line">    <span class="comment">//AAA = 1000 //=&gt; Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">    <span class="built_in">console</span>.log(AAA) <span class="comment">//=&gt; 当前函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AAA() //=&gt; Uncaught ReferenceError: AAA is not defined</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>看一下以下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line">!(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">20</span> </span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">//=&gt; 输出b函数</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//=&gt; 10</span></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>== 进行比较时，如果左右两边数据类型不一样，则先转换为相同的数据类型，然后再进行比较</p><ol><li>{} == {} 两个对象进行比较，比较的是堆内存的地址</li><li>null == undefined 相等，null === undefined 不相等</li><li>NaN == NaN 不相等 NaN和谁都不相等</li><li>[12] == ‘12’ 对象和字符串相比，是把对象toString()转换为字符串后再进行比较</li><li>剩余所有情况在进行比较时，都是转换为数字（前提数据类型不一样）<br>对象转数字：先转换为字符串，然后再转换为数字<br>字符串转数字：只要出现一个非数字字符，结果就是 NaN<br>布尔转数字：true-&gt;1 false-&gt;0<br>null转数字为0<br>undefined转数字为NaN<br>[12] == true =&gt; Number([12].toString()) == 1 false<br>[] == false =&gt; 0 == 0 true<br>[] == 1 =&gt; 0 == 1 false<br>true == 2 =&gt; 1 == 2 false</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ? <span class="comment">// 当a等于什么时，符合下面表达式</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：</span></span><br><span class="line"><span class="comment">// 对象和数字比较：先把对象.toString()变为字符串，然后再转换为数字</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">            n: <span class="number">0</span>,</span><br><span class="line">            toString()&#123;</span><br><span class="line">                <span class="keyword">return</span> ++<span class="keyword">this</span>.n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// a.toString(); 此时调取的就不再是Object.prototype.toString了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.toString = a.shift</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'a'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value ? ++<span class="keyword">this</span>.value : <span class="keyword">this</span>.value = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="理解Array-prototype-push"><a href="#理解Array-prototype-push" class="headerlink" title="理解Array.prototype.push"></a>理解Array.prototype.push</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">    length: <span class="number">2</span>,</span><br><span class="line">    push: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="number">1</span>)</span><br><span class="line">obj.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[<span class="keyword">this</span>.length] = val</span><br><span class="line">    <span class="comment">//=&gt; this.length 在原来的基础上加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="number">1</span>) <span class="comment">//=&gt; obj[length]=1 //=&gt; obj[2]=1</span></span><br><span class="line">obj.push(<span class="number">2</span>) <span class="comment">//=&gt; obj[length]=2 //=&gt; obj[3]=2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//=&gt; &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 三大经典排序  </span></span><br><span class="line"><span class="string">### 冒泡排序：  </span></span><br><span class="line"><span class="string">让数组中的当前项和后一项进行比较，如果当前项比后一项大，则两项交换位置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length <span class="number">-1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - j; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换位置</span></span><br><span class="line">                <span class="comment">// let temp = arr[i]</span></span><br><span class="line">                <span class="comment">// arr[i] = arr[i + 1]</span></span><br><span class="line">                <span class="comment">// arr[i + 1] = temp</span></span><br><span class="line">                [arr[i], arr[i+<span class="number">1</span>]] = [arr[i+<span class="number">1</span>], arr[i]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubble(arr))</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [arr[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; arr.length <span class="number">-1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = newArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; newArr[i]) &#123;</span><br><span class="line">                newArr.splice(i+<span class="number">1</span>, <span class="number">0</span>, arr[j])</span><br><span class="line">                <span class="keyword">break</span>   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">                newArr.unshift(arr[j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line">cosole.log(insert(arr))</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span></span></span><br><span class="line"><span class="function">    // 不会造成栈溢出</span></span><br><span class="line"><span class="function">    <span class="title">setTimeout</span>(<span class="params">fn, <span class="number">0</span></span>) </span></span><br><span class="line"><span class="function">    // <span class="title">js</span> 运行是基于单线程的， 如果时间设为0，代表立即插入队列，但不是立即执行，仍然要等待前面代码执行完毕</span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middleIndex = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>),</span><br><span class="line">        middleValue = arr.splice(middleIndex, <span class="number">1</span>)[<span class="number">0</span>],</span><br><span class="line">        leftArr = [],</span><br><span class="line">        rightArr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = arr[i]</span><br><span class="line">        item &lt; middleValue ? leftArr.push(item) : rightArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quick(leftArr).concat(middleValue, quick(rightArr))   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quick(arr))</span><br></pre></td></tr></table></figure><h2 id="完成如下需求"><a href="#完成如下需求" class="headerlink" title="完成如下需求"></a>完成如下需求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">某公司1到12月份的销售额存在一个对象里面  </span><br><span class="line">如下：&#123;</span><br><span class="line">    1: 222,</span><br><span class="line">    2: 123,</span><br><span class="line">    5: 777</span><br><span class="line">&#125;,</span><br><span class="line">请把数据处理为如下结构：[222, 123, null, null, 777, null, null, null, null, null, null, null]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="number">222</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">777</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sale</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">        obj[i] ? arr.push(obj[i]) : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="literal">null</span>).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> obj[index + <span class="number">1</span>] || <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 </span></span><br><span class="line">obj.length = <span class="number">13</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(obj).slice(<span class="number">1</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> item === <span class="string">"undefinded"</span> ? <span class="literal">null</span> : item</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="literal">null</span>)</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    arr[item - <span class="number">1</span>] = obj[item]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="给定两个数组，写一个方法来计算它们的交集"><a href="#给定两个数组，写一个方法来计算它们的交集" class="headerlink" title="给定两个数组，写一个方法来计算它们的交集"></a>给定两个数组，写一个方法来计算它们的交集</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> s2 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">[...s1], [...s2]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mix = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = s1.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = s2.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] === s2[j]) &#123;</span><br><span class="line">                mix.push(s1[i])</span><br><span class="line">                s1.splice(i, <span class="number">1</span>)</span><br><span class="line">                s2.splice(j, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mix</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(intersection(s1, s2))</span><br></pre></td></tr></table></figure><h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数<br>输入：[1, 2, 3, 4, 5] 和 k = 3<br>输出：[3, 4, 5, 1, 2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || k === <span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="keyword">this</span>.length) k = k % <span class="keyword">this</span>.length</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.slice(-k).concat(<span class="keyword">this</span>.slice(<span class="number">0</span>, <span class="keyword">this</span>.length - k))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2</span></span><br><span class="line">    <span class="comment">// return [...this.splice(this.length-k), ...this] </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法3</span></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; k; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     this.unshift(this.pop())</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法4</span></span><br><span class="line">    <span class="comment">// new Array(k).fill('').forEach(() =&gt; this.unshift(this.pop()))</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.rotate = rotate</span><br><span class="line"><span class="built_in">console</span>.log(arr.rotate(<span class="number">3</span>)) <span class="comment">//=&gt; [ 3, 4, 5, 1, 2 ]</span></span><br></pre></td></tr></table></figure><h2 id="请实现一个-add-函数，满足以下功能"><a href="#请实现一个-add-函数，满足以下功能" class="headerlink" title="请实现一个 add 函数，满足以下功能"></a>请实现一个 add 函数，满足以下功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(1) // 1  </span><br><span class="line">add(1)(2) // 3  </span><br><span class="line">add(1)(2)(3) // 6  </span><br><span class="line">add(1, 2)(3) // 6  </span><br><span class="line">add(1, 2, 3) // 6</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params">context = window, ...outerArg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...innerArg</span>) </span>&#123;</span><br><span class="line">            _this.call(context, ...outerArg.concat(innerArg))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myBind = myBind</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 基本命令</title>
      <link href="/blog/2019/08/13/git/git-command/"/>
      <url>/blog/2019/08/13/git/git-command/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 10:46:40 GMT+0000 (Coordinated Universal Time) --><h2 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h2><p>设置 git 全局邮箱和用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><p>设置 ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看密钥是否存在</span><br><span class="line">ls ~/.ssh</span><br><span class="line"></span><br><span class="line"># 生成密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line"></span><br><span class="line"># 查看密钥，并把它复制到 github 或者 codding 等相关平台</span><br><span class="line">cat ~/.ssh/id_rsa_pub</span><br><span class="line"></span><br><span class="line"># 最后验证一下</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.codding.net   #或者 codding 平台</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">git add .</td><td align="left">将修改的代码添加到暂存区 (. 代表当前目录)</td></tr><tr><td align="left">git commit -m “message”</td><td align="left">将缓存区的内容添加到本地仓库</td></tr><tr><td align="left">git status</td><td align="left">查看当前暂存区状态</td></tr><tr><td align="left">git remote add origin 仓库地址</td><td align="left">添加远程仓库</td></tr><tr><td align="left">git push -u origin master</td><td align="left">把本地仓库推送到远程服务器</td></tr><tr><td align="left">git log [<option>]</option></td><td align="left">查看版本演变历史 option: <code>--all</code>（所有分支） <code>--graph</code>（图形化显示当前分支日志信息） <code>-nm</code>（m表示数字，显示当前分支最近m次的提交记录日志信息） <code>--oneline</code>（当前分支简要日志信息）</td></tr><tr><td align="left">git remote show [remote-name]</td><td align="left">查看某个远程仓库的详细信息，例如：git remote show origin</td></tr><tr><td align="left">git pull [<options>] [<repos>] [<refspec>…]</refspec></repos></options></td><td align="left">从一个仓库或本地分支拉取并且整合代码&lt;refspec&gt;表示分支的名字，options: <code>--allow-unrelated-histories</code>（允许无关历史）<code>-ff</code> <code>-no-ff</code> <code>-ff-only</code> ff (fast-forward) 表示快速合并</td></tr><tr><td align="left">git reset –merge</td><td align="left">回退</td></tr></tbody></table><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="连接超时错误"><a href="#连接超时错误" class="headerlink" title="连接超时错误"></a>连接超时错误</h3><p>出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li>打开 git 的安装目录中的 <code>etc/ssh/ssh_config</code> 文件，添加以下代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User youremail@qq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><ol start="2"><li>在 git 命令窗口中输入 <code>ssh -T git@gitub.com</code>，按照提示输入yes，最后会出现下面的提示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
