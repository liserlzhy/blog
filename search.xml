<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2019/11/07/hello-world/"/>
      <url>/blog/2019/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myblog</title>
      <link href="/blog/2019/11/07/myblog/"/>
      <url>/blog/2019/11/07/myblog/</url>
      
        <content type="html"><![CDATA[<h2 id="产生唯一-id"><a href="#产生唯一-id" class="headerlink" title="产生唯一 id"></a>产生唯一 id</h2><p><code>npm i uuid -D</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(uuid().replace(<span class="regexp">/\-/g</span>, <span class="string">''</span>)) <span class="comment">// 把所有的 - 去掉</span></span><br></pre></td></tr></table></figure><h2 id="获取-后缀名"><a href="#获取-后缀名" class="headerlink" title="获取 后缀名"></a>获取 后缀名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> ext = path.extname(<span class="string">'xx.txt'</span>) <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><ol><li>减少内存占用、增强系统性能（利用率高）</li><li>分3种：读取、写入、读写<ul><li>读取流：req、fs.createReadStream</li><li>写入流：res、fs.createWriteStream</li><li>读写流：zlib.createGzip</li></ul></li><li>把压缩文件发送到浏览器，需要设置响应头<ul><li>res.setHeader(‘Content-Encoding’, ‘gzip’)  </li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line"><span class="comment">// 读写流：压缩，加密</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'www/1.html'</span>) <span class="comment">// 读取流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'www/2.html.gz'</span>) <span class="comment">// 写入流</span></span><br><span class="line"></span><br><span class="line">rs.pipe(gz).pipe(ws)</span><br><span class="line">rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-事件队列"><a href="#EventEmitter-事件队列" class="headerlink" title="EventEmitter 事件队列"></a>EventEmitter 事件队列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Event = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ev = <span class="keyword">new</span> Event()</span><br><span class="line"><span class="comment">// ev监听</span></span><br><span class="line">ev.on(<span class="string">'blu'</span>, (a, b, c) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到了'</span>, a, b, c)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ev触发</span></span><br><span class="line">ev.emit(<span class="string">'blu'</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 返回值为是否有对应监听</span></span><br></pre></td></tr></table></figure><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>)</span><br><span class="line"><span class="keyword">let</span> ip = <span class="string">''</span></span><br><span class="line">dns.lookup(<span class="string">'www.badu.com'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wrong'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ip = data</span><br><span class="line">        <span class="built_in">console</span>.log(data) <span class="comment">//输出百度的ip地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">dns.lookupService(ip, <span class="number">80</span>, (err, data) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">let</span> arr = os.cpus() <span class="comment">// cpu 信息</span></span><br><span class="line"><span class="keyword">let</span> free = os.freemem() <span class="comment">// 空闲内存</span></span><br></pre></td></tr></table></figure><h2 id="Assertion-调试"><a href="#Assertion-调试" class="headerlink" title="Assertion 调试"></a>Assertion 调试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> a == <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> b == <span class="string">'number'</span>, <span class="string">'都得是数字'</span>)</span><br><span class="line">    assert(b != <span class="number">0</span>, <span class="string">'分母不能为0'</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(divide(a, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="Crypto-加密"><a href="#Crypto-加密" class="headerlink" title="Crypto 加密"></a>Crypto 加密</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = requrie(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">let</span> hash = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">hash.update(<span class="string">'sdl'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure><h2 id="Child-Process-多进程"><a href="#Child-Process-多进程" class="headerlink" title="Child Process 多进程"></a>Child Process 多进程</h2><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul><li>只有系统才能完全全新创造进程</li><li>一个程序可以通过复制自己创造新的进程</li><li>子进程不能再创造进程</li><li>主进程和子进程之间能够共享句柄(socket端口)  </li></ul><pre><code class="js"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)<span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)<span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>) <span class="comment">// 进程信息</span><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)<span class="keyword">if</span> (cluster.isMaster) { <span class="comment">// 判断是否为主进程，若是主进程则分裂子进程</span>    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) {        cluster.fork()     }    <span class="built_in">console</span>.log(<span class="string">'主进程'</span>)} <span class="keyword">else</span> {    http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> {        <span class="built_in">console</span>.log(<span class="string">`工作进程#<span class="subst">${process.pid}</span>`</span>)    }).listen(<span class="number">3000</span>)}</code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>history</title>
      <link href="/blog/2019/11/05/node-1/"/>
      <url>/blog/2019/11/05/node-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>about1</title>
      <link href="/blog/2018/11/05/about/me/"/>
      <url>/blog/2018/11/05/about/me/</url>
      
        <content type="html"><![CDATA[<h2 id="about-is-you"><a href="#about-is-you" class="headerlink" title="about is you"></a>about is you</h2><p>含义乐山大佛 11111111111</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/blog/2017/10/31/node/"/>
      <url>/blog/2017/10/31/node/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h2><p>Node.js is a JavaScript runtime built on <strong><em>Chrome’sV8 JavaScript engine</em></strong>. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficent. Node.js’package ecosystem, <strong><em>npm</em></strong>, is the largest ecosystem of open source libraries in the world. </p><h2 id="nodejs特点"><a href="#nodejs特点" class="headerlink" title="nodejs特点"></a>nodejs特点</h2><ul><li>单线程  </li><li>非阻塞I/O</li><li>事件驱动</li></ul><h3 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h3><p>在Java、PHP或者.net等服务器语言中，会为每一个客户端连接创建一个新的 进程。而每个线程需要耗费大约2MB内存。也就是说理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。  </p><p>Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序上宏观上也是并行的。使用Node.js，一个8GB内存的服务器，可以同时处理超过4万用户的连接。另外，单线程带来的好处还有，操作系统完全不再有线程创建、销毁的时间开销。  </p><img src="/blog/2017/10/31/node/thread.png" height="300">  <h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I/O"></a>非阻塞 I/O</h3><p>在传统的单线程处理机制中，在执行了访问数据库代码之后，整个线程都将暂停下来，等待数据库返回结果，才能执行后面的代码。也就是说，I/O阻塞了代码的执行，极大地降低了程序的执行效率。  </p><p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。  </p><p>当某个I/O执行完毕时，将以事件形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。  </p><p>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>在Node中，客户端请求建立连接，提交数据等行为，会触发响应的事件；在每一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数中途，可以转而处理其他事件（比如，新用户连接），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。  </p><p>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。  </p><img src="/blog/2017/10/31/node/event.png" height="300"><h2 id="适合开发什么？"><a href="#适合开发什么？" class="headerlink" title="适合开发什么？"></a>适合开发什么？</h2><p>善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也是相当于这个计算阻塞了这个单线程，就不适合Node开发。  </p><p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与websocket配合，开发长连接的实时交互应用。  </p><p>比如：</p><ul><li>用户表单收集</li><li>考试系统</li><li>聊天室</li><li>图文直播</li><li>提供 JSON 的 API （为前台Angular使用）</li></ul><h2 id="比之老牌后台语言"><a href="#比之老牌后台语言" class="headerlink" title="比之老牌后台语言"></a>比之老牌后台语言</h2><p>Node.js本就是极客追求性能极致的产物，缺少了很多服务器的键状性考量。所以Node不可能应用在银行、证券、电信等需要极高可靠性的业务中。 </p><p>中国的企业实战中，创业型公司（正处于A轮、B轮）非常爱使用Node做核心任务：</p><ul><li>功夫熊的APP，后台是Node.js在伺服</li><li>实现网，整站都为Node.js搭建</li></ul><p>成熟大企业，基本上都是用Node实现某一方面的功能：</p><ul><li>知乎用了一个Node进程，跑起了“站内信”功能</li><li>百度的很多表单，是用Node保存到数据库的</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about1</title>
      <link href="/blog/2015/11/05/about2/me/"/>
      <url>/blog/2015/11/05/about2/me/</url>
      
        <content type="html"><![CDATA[<h2 id="about-is-you"><a href="#about-is-you" class="headerlink" title="about is you"></a>about is you</h2><p>含义乐山大佛 33333333333</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>about1</title>
      <link href="/blog/2014/11/05/about3/me/"/>
      <url>/blog/2014/11/05/about3/me/</url>
      
        <content type="html"><![CDATA[<h2 id="about-is-you"><a href="#about-is-you" class="headerlink" title="about is you"></a>about is you</h2><p>含义乐山大佛 44444444</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
