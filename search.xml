<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pm2线上部署</title>
      <link href="/blog/2020/05/16/node/pm2/"/>
      <url>/blog/2020/05/16/node/pm2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h2><h3 id="ssh免密登录到服务器"><a href="#ssh免密登录到服务器" class="headerlink" title="ssh免密登录到服务器"></a>ssh免密登录到服务器</h3><ol><li>本地生成密钥对</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;xxx@qq.com&apos;</span><br><span class="line"></span><br><span class="line"># -t 指定密钥类型，可省略</span><br><span class="line"># -C 注释文字，可省略</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>把公钥 id_rsa.pub 添加到服务器下的authorized_keys文件里</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub | ssh username@host &apos;cat &gt;&gt; ~/.ssh/authorized_keys&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>这样就可以使用以下命令免密登录了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@host</span><br></pre></td></tr></table></figure><ol start="4"><li>通过别名直接登录: <code>ssh 别名</code></li></ol><p>在本地~/.ssh/config文件中添加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">HostName ip地址或域名</span><br><span class="line">User 用户名</span><br><span class="line">Port 22</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 配置github SSH KEY</span><br><span class="line"></span><br><span class="line">把上面本地生成的公钥id_rsa.pub添加到github网站上的SSH KEY</span><br><span class="line"></span><br><span class="line">### 配置github deploy key</span><br><span class="line"></span><br><span class="line">在服务器生成密钥对</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C &apos;xxx@qq.com&apos;</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>把公钥复制黏贴到github上要部署的项目仓库 deploy key里</p><h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><p>安装pm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure><h3 id="pm2-配置文件"><a href="#pm2-配置文件" class="headerlink" title="pm2 配置文件"></a>pm2 配置文件</h3><p>在项目的根目录新建 ecosystem.config.js 文件，也可通过 <code>pm2 init</code> 快速创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ecosystem.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"apps"</span>: [&#123;</span><br><span class="line">    <span class="string">"name"</span> :<span class="string">"xxx"</span>, <span class="comment">// 项目名称</span></span><br><span class="line">    <span class="string">"script"</span>: <span class="string">"app.js"</span>, <span class="comment">// 启动脚本</span></span><br><span class="line">    <span class="string">"watch"</span>: <span class="literal">true</span>, <span class="comment">// 监听目录的变化，自动重启</span></span><br><span class="line">    <span class="string">"ignore_watch"</span>: [ <span class="comment">// 在监控目录中排除</span></span><br><span class="line">      <span class="string">"node_modules"</span>,</span><br><span class="line">      <span class="string">"logs"</span>,</span><br><span class="line">      <span class="string">"public"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"watch_options"</span>: &#123;</span><br><span class="line">      <span class="string">"followSymlinks"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"env"</span> :&#123; <span class="comment">// 开发环境变量</span></span><br><span class="line">      <span class="string">"PORT"</span>: <span class="number">5000</span>,</span><br><span class="line">      <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"env_production"</span>: &#123; <span class="comment">// 生产环境变量</span></span><br><span class="line">      <span class="string">"PORT"</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"error_file"</span>: <span class="string">"./logs/app_err.log"</span>, <span class="comment">// 错误日志输出路径</span></span><br><span class="line">    <span class="string">"output_file"</span>: <span class="string">"./logs/app_out.log"</span>, <span class="comment">// 普通日志</span></span><br><span class="line">    <span class="string">"merge_logs"</span>: <span class="literal">true</span>, <span class="comment">// 以追加内容方式添加日志</span></span><br><span class="line">    <span class="string">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm:ss"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"deploy"</span>: &#123;</span><br><span class="line">    <span class="string">"production"</span>: &#123;</span><br><span class="line">      <span class="string">"user"</span>: <span class="string">"root"</span>, <span class="comment">// 服务器用户名</span></span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"yourdomain.com"</span>, <span class="comment">// 服务器ip或域名</span></span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"origin/master"</span>, <span class="comment">// 仓库分支</span></span><br><span class="line">      <span class="string">"repo"</span>: <span class="string">"git@github.com:xxxx/xxxx.git"</span>, <span class="comment">// 仓库ssh url</span></span><br><span class="line">      <span class="string">"path"</span>: <span class="string">"/home/www"</span>, <span class="comment">// 项目要放置在服务器中的目录</span></span><br><span class="line">      <span class="string">"port"</span>: <span class="string">"22"</span>, <span class="comment">// ssh 端口，默认22</span></span><br><span class="line">      <span class="string">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">      <span class="string">"post-deploy"</span> : <span class="string">"npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,</span><br><span class="line">      <span class="string">"pre-deploy-local"</span>: <span class="string">"echo 'Deploy Done'"</span>,</span><br><span class="line">      <span class="string">"pre-setup"</span>: <span class="string">"rm -rf /home/www/source"</span>, <span class="comment">// 部署项目之前先删除之前的项目</span></span><br><span class="line">      <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 先把项目推送到github仓库上</span><br><span class="line">git remote set origin git@github.com:xxxx/xxxx.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;first push&apos;</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"># 把项目部署到服务器上</span><br><span class="line">pm2 deploy ecosystem.json production setup</span><br><span class="line"></span><br><span class="line"># 开启服务</span><br><span class="line">pm2 deploy ecosystem.json production</span><br></pre></td></tr></table></figure><p>配置成功后，打开 <a href="http://yourdomain.com" target="_blank" rel="noopener">http://yourdomain.com</a> 就可浏览你的项目了</p><h3 id="pm2-基本命令"><a href="#pm2-基本命令" class="headerlink" title="pm2 基本命令"></a>pm2 基本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pm2 list                    # 查看所有启动项目</span><br><span class="line">pm2 logs                    # 查看所有日志</span><br><span class="line">pm2 log &lt;APPName&gt;/&lt;id&gt;      # 查看某个进程的日志</span><br><span class="line">pm2 info &lt;APPName&gt;/&lt;id&gt;     # 查看进程详细信息</span><br><span class="line">pm2 monit &lt;APPName&gt;/&lt;id&gt;    # 打开监控 logs</span><br><span class="line">pm2 restart &lt;APPName&gt;/&lt;id&gt;  # 项目重启</span><br><span class="line">pm2 delete &lt;APPName&gt;/&lt;id&gt;   # 删除某个项目进程</span><br></pre></td></tr></table></figure><h2 id="把本地项目复制到服务器中的方法"><a href="#把本地项目复制到服务器中的方法" class="headerlink" title="把本地项目复制到服务器中的方法"></a>把本地项目复制到服务器中的方法</h2><p>Linux scp 命令用于 Linux 之间复制文件和目录，window系统可使用git bash进行操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r local-dir root@ip:remote_dir</span><br><span class="line">#在本地终端执行上述命令：</span><br><span class="line">#【local-dir】为本地路径；</span><br><span class="line">#【ip】为你服务器的ip； </span><br><span class="line">#【remote_dir】为你放到远程服务器的地址，我们这里是 /root</span><br></pre></td></tr></table></figure><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="Host-key-verification-failed"><a href="#Host-key-verification-failed" class="headerlink" title="Host key verification failed"></a>Host key verification failed</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br><span class="line">  failed to clone</span><br><span class="line">Deploy failed</span><br></pre></td></tr></table></figure><p>此时主要是在远程服务器中，并未将<a href="http://github.com加入known_hosts，在服务器端通过如下命令设置" target="_blank" rel="noopener">http://github.com加入known_hosts，在服务器端通过如下命令设置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure><h3 id="Warning-Permanently-added-the-RSA-host-key-…"><a href="#Warning-Permanently-added-the-RSA-host-key-…" class="headerlink" title="Warning: Permanently added the RSA host key …"></a>Warning: Permanently added the RSA host key …</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key for IP address &apos;13.250.177.223&apos; to the list of known hosts.</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>linux：</p><p>在vim /etc/hosts文件下添加如下内容：</p><p>13.250.177.223 github.com 根据自己的Ip修改</p><p>windows：</p><p>在C:\Windows\System32\drivers\etc\hosts文件添加</p><p>13.250.177.223 github.com 根据自己的Ip修改</p><h3 id="warning-LF-will-be-replaced-by-CRLF-in"><a href="#warning-LF-will-be-replaced-by-CRLF-in" class="headerlink" title="warning: LF will be replaced by CRLF in"></a>warning: LF will be replaced by CRLF in</h3><p>windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><h3 id="fatal-destination-path-‘-xxx’-already-exists"><a href="#fatal-destination-path-‘-xxx’-already-exists" class="headerlink" title="fatal: destination path ‘/xxx’ already exists"></a>fatal: destination path ‘/xxx’ already exists</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: destination path &apos;/home/liserl/www/source&apos; already exists and is not an empty directory.</span><br></pre></td></tr></table></figure><p>在ecosystem.json中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;pre-setup&quot;: &quot;rm -rf /xxx/source&quot;</span><br></pre></td></tr></table></figure><h3 id="bash-npm-command-not-found"><a href="#bash-npm-command-not-found" class="headerlink" title="bash: npm: command not found"></a>bash: npm: command not found</h3><p>方法1：vim ~/.bashrc 把下面几行注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#case $- in</span><br><span class="line">#    *i*) ;;</span><br><span class="line">#      *) return;;</span><br><span class="line">#esac</span><br></pre></td></tr></table></figure><p>方法2：把npm进行软链接 (pm2: command not found 也可通过设置软连接解决)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis npm # 获取原来的地址</span><br><span class="line">ln -s /root/.nvm/versions/node/v10.16.0/bin/npm /usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="usr-bin-env-node-No-such-file-or-directory"><a href="#usr-bin-env-node-No-such-file-or-directory" class="headerlink" title="/usr/bin/env: node: No such file or directory"></a>/usr/bin/env: node: No such file or directory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/.nvm/versions/node/v10.16.0/bin/node /usr/bin/node</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/blog/2020/01/18/others/typescript/"/>
      <url>/blog/2020/01/18/others/typescript/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>1、安装 TypeScript 编译器</p><pre><code>npm i typescript -g</code></pre><p>TypeScript 是 JavaScript 的超集，添加了可选的静态类型和基于类的面向对象编程。所以 TypeScript 代码在浏览器/Node环境下运行，需要把 TypeScript 代码编译为 JavaScript 代码</p><p>2、编译命令</p><pre><code>./node_modules/bin/tsc ./src/1.ts --outDir ./dist</code></pre><p>3、配置文件 ( tsconfig.json )</p><a id="more"></a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>, </span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es2017"</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist"</span>, </span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitThis"</span>: <span class="literal">true</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [ </span><br><span class="line">    <span class="string">"./src/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：</p><p><code>compilerOtions</code></p><ul><li><code>module</code>: 指定编译后的代码要使用的模块化系统，注意：只有”AMD”和”System”能和outFile一起使用</li><li><code>target</code>: 指定编译后的代码对应的 ECMAScript版本</li><li><code>outDir</code>: 指定编译后的代码文件输出目录</li><li><code>outFile</code>: 将输出文件合并成一个文件 (合并的文件顺序为加载和依赖顺序)</li><li><code>strictNullChecks</code>: 严格模式</li></ul><p><code>include</code>: 指定要编译的文件目录，若不指定会编译该目录下所有的TypeScript文件，可使用 glob 匹配模式，例如：* 匹配0或则多个字符，?匹配一个任意字符，**/匹配任意子目录</p><p>配置完成后，直接输入<code>./node_modules/bin/tsc</code> 它会自动编译ts文件</p><p>注意： ts-node 模块可以编译并运行TypeScript文件</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><p>类型注解（类型声明、类型约束）</p><p>JavaScript 是动态语言，变量随时可以被赋予不同类型的值，变量值得类型只有在运行时才能决定</p><p>使用类型注解能够在变量声明的时候确定变量存储的值的类型，用来约束变量或参数值的类型，这样在编码阶段就可以检查出可能出现的问题，避免把错误带到执行期间</p><p>语法：</p><pre><code>let 变量:类型</code></pre><p>当变量接收了与定义的类型不符的数据会导致编译失败（警告）</p><p>基本类型：string、number、boolean<br>对象类型：String、Number、Boolean</p><p>注意：基本类型可以赋值给对应包装对象，包装对象不可以复制给对应基本类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s:<span class="built_in">String</span> = <span class="string">'typescript'</span></span><br><span class="line"><span class="keyword">let</span> s:<span class="built_in">string</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'typescript'</span>) <span class="comment">// 该语句会报错</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>基本语法：<code>let list: number[];</code><br>泛型方式：<code>let list: Array&lt;number&gt;;</code></p><p>注意：该数组是具有相同类型的一组有序数据的集合，声明数组的同时要确定数据存储的数据类型</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>];</span><br><span class="line">data[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 一定得是number类型</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="string">'2'</span>; </span><br><span class="line">data[<span class="number">2</span>] = <span class="literal">false</span>;</span><br><span class="line">data[<span class="number">3</span>] = <span class="number">10</span>; <span class="comment">// number,string,boolean 随便一种类型都可以</span></span><br><span class="line"><span class="comment">// 注意：数据类型要对应定义的顺序， 越界部分，采用联合类型</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: stirng|<span class="built_in">number</span>; <span class="comment">// 可存储string或number类型的数据</span></span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">string</span>&amp;<span class="built_in">number</span> = &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123;mail, femail&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Gender.mail)</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>任意类型</p><h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// ts会根据变量初始化的时候根据赋予的值进行类型判断 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">// 事件函数的第一个参数，根据当前绑定的事件类型推导(e:MouseEvent)</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>对函数的参数和返回值进行类型约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据类型推断可简写为</span></span><br><span class="line"><span class="keyword">let</span> fn2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line">fn2(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 如果函数没有返回值 :void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可选参数 ? */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 参数默认值 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params">x = 1</span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x * x &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 剩余参数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn5</span>(<span class="params">...arg: <span class="built_in">any</span>[]</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数重载 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">any</span>, y: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数中的-this"><a href="#函数中的-this" class="headerlink" title="函数中的 this"></a>函数中的 this</h3><ul><li>ts 中函数中的 this 默认指向类型 : any （除了事件函数）</li><li>any类型不能指示任何属性方法</li><li>我们可以通过 <code>--nolmplicitThis</code> 选项来取消this的默认any类型设置</li><li>ts 会自动推导事件函数中的 this</li><li>在ts中函数的第一个this参数是用来设置 this 类型约束的，该this参数是个假参数，运行过程中是不存在的，是给ts检测使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  fn(<span class="keyword">this</span>: Document|Element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.querySelecter()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onclick = obj1.fn;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>与 ES2015 的 class 类似，同时还新添了一些特性，TS 中的成员属性可以提取到构造函数以外进行定义</p><p>通过修饰符可以对类中成员属性与成员方法进行访问控制：</p><ul><li>public : 公开的，所有地方都能访问，属性和方法默认是public</li><li>protected : 受保护的，在类的内部和他的子类中才能访问</li><li>private : 私有的，只能在该对象（类）的内部才可以访问</li><li>readonly : 只读</li></ul><p>存取器：getters/setters 截取对对象成员的访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts类中的成员属性必须要声明后使用</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  username: <span class="built_in">string</span> = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, <span class="keyword">private</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.username = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存取器，属性方式去访问</span></span><br><span class="line">  <span class="keyword">get</span> age(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> age(age: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>如果子类没有重写构造函数，会直接继承父类的，否则需要手动调用父类构造函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">username: <span class="built_in">string</span>, age: <span class="built_in">number</span>, <span class="keyword">public</span> grade: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(username age); <span class="comment">// 执行父类构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>抽象方法只定义结构不定义具体实现。</li><li>拥有抽象方法的类必须是抽象类，但抽象类不一定拥有抽象方法，抽象类中也可以包含其他非抽象方法。</li><li>抽象类不能被实例化。</li><li>继承抽象类的类必须实现抽象类中的所有方法，否则该子类也必须声明为抽象的。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.username = username</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> study(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  study() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i am studing something new.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>为我们提供一种方式来定义某种结构，ts按照这种结构来检测数据</li><li>接口中定义的规则只有抽象描述，不能有具体实现</li><li>类型检查器只会检测必须的属性是否存在，以及类型是否匹配，不会检查属性的顺序<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Options &#123;</span><br><span class="line">  width: <span class="built_in">number</span>,</span><br><span class="line">  height: <span class="built_in">number</span>, <span class="comment">// 比选属性</span></span><br><span class="line">  color?: <span class="built_in">string</span>, <span class="comment">// 可选属性</span></span><br><span class="line">  <span class="comment">// readonly name: string // 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">opts: Options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绕开类型检测 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 告知ts检测，传入的就是一个 Options</span></span><br><span class="line">fn(&#123; height: <span class="number">200</span> &#125; <span class="keyword">as</span> Options) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 先赋值给一个变量，也可以绕开检测</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; height: <span class="number">100</span>, width: <span class="number">20</span>, color: <span class="string">'red'</span>, a: <span class="number">1</span>&#125;</span><br><span class="line">fn(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引签名：希望规则是一组由数字进行key命名的对象</span></span><br><span class="line"><span class="comment">// 索引key类型只能是string或number， string 也支持number key</span></span><br><span class="line"><span class="keyword">interface</span> Options2 &#123;</span><br><span class="line">  [attr: <span class="built_in">number</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数接口</span></span><br><span class="line"><span class="keyword">interface</span> IFn &#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类接口"><a href="#类接口" class="headerlink" title="类接口"></a>类接口</h3><ul><li>继承接口的类必须拥有接口定义的属性和方法</li><li>一个类只能继承一个类，但是可以实现多个接口</li><li>接口之间也可以继承</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ISuper &#123;</span><br><span class="line">  fly(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Man&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">pubic name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SuperMan  <span class="keyword">extends</span> Man <span class="keyword">implements</span> ISuper&#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i can fly'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>通常我们会使用变量来表示是一个可变的值，通过变量我们就可以使代码具有很高的可重用性，但是在有类型约束的语言中，有时候不利于代码的复用，通过使用泛型，我们就可以解决这个问题，简单的理解可以说是给类型定义变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">x: T[]</span>): <span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn&lt;<span class="built_in">string</span>&gt;([<span class="string">'s'</span>, <span class="string">'1'</span>])</span><br><span class="line"><span class="keyword">class</span> MyArray &lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> _data: T[] = [];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类类型 &#123;new()&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_</span>(<span class="params">constructor: &#123;<span class="keyword">new</span>(): <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">constructor</span>(<span class="params"></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在尽可能不改变类（对象）结构的情况下，扩展其功能。装饰器是一种特殊类型的声明，它可以被附加到类声明、属性、方法、参数或访问符上。</p><p>启动装饰器模式：–experimentalDecorators</p><p>装饰器函数：<br>我们要在一个类或方法上使用装饰器，首先需要提供一个装饰器函数，这个函数会在该装饰器被使用的时候调用</p><p>1、类装饰器：<br>类装饰器应用于构造函数，可以用来监视、修改或替换类定义，类的构造函数会作为类装饰器函数的唯一一个参数</p><pre><code>function f(constructor: Function) {}</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Age</span>(<span class="params">v: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args: <span class="built_in">any</span>[]): &#123;&#125;&#125;&gt;(<span class="keyword">constructor</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">class</span> Person2 <span class="keyword">extends</span> <span class="keyword">constructor</span> &#123;</span><br><span class="line">      age: <span class="built_in">number</span> = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Person2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Age是一个装饰器函数，该函数会自动调用。调用的时候会传入对应类的构造函数</span></span><br><span class="line"><span class="comment">// 如果希望转入构造值，就得使用闭包</span></span><br><span class="line"><span class="meta">@Age</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  username = <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// Person2 &#123;username: 'Tom', age: 20 &#125;</span></span><br></pre></td></tr></table></figure><p>2、方法装饰器：<br>用来监视、修改或替换方法定义，方法装饰器会在调用时传入下列三个参数</p><ul><li>对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象</li><li>成员的名称</li><li>成员属性描述符</li></ul><p>3、访问器装饰器<br>访问器：get、set，访问器装饰器会在调用时传入下列3个参数：</p><ul><li>对于静态成员来说是类的构造函数，对于实例成员来说是类的原型对象</li><li>成员的名称</li><li>成员属性描述符</li></ul><p>注意：不允许同时修饰一个成员的get和set服务器。一个成员的所有装饰必须应用在文档顺序的第一个访问器上</p><p>4、参数装饰器<br>参数装饰器声明在一个参数声明之前，参数装饰器只能用来监视一个方法的参数是否被传入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input: HTMLInputElement = <span class="built_in">document</span>.querySelector(<span class="string">'.val'</span>);</span><br><span class="line"><span class="keyword">let</span> btn: HTMLButtonElement = documentSelector(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="built_in">number</span> = <span class="built_in">Number</span>(input.value) + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/blog/2019/12/30/database/mysql/"/>
      <url>/blog/2019/12/30/database/mysql/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>存储引擎：数据在计算机上存储的方式</p><p>MySQL 常见的存储引擎：InnoDB、MyISAM等</p><ul><li><p>InnoDB 的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大</p></li><li><p>MyISAM 的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性</p><a id="more"></a><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2></li></ul><h3 id="字符集、编码"><a href="#字符集、编码" class="headerlink" title="字符集、编码"></a>字符集、编码</h3><ul><li>指数据库存储的数据的编码</li><li>utf8mb4 : 支持更多的 unicode 字符（四字节）</li><li>_bin、_cs : 区分大小写</li><li>_ci : 不区分大小写</li></ul><h3 id="数据校对"><a href="#数据校对" class="headerlink" title="数据校对"></a>数据校对</h3><ul><li><p>数据库除了要存储数据，还要对数据进行排序，比较等操作，不同的校对规则会有不同的结果</p></li><li><p>utf8mb4_unicode_ci : 基于标准的 Unicode 来排序和比较，能够在各种语言和之间精确排序</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数字类型</p><table><thead><tr><th align="left">类型</th><th align="left">存储 (字节)</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1</td></tr><tr><td align="left">SMALLINT</td><td align="left">2</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3</td></tr><tr><td align="left">INT</td><td align="left">4</td></tr><tr><td align="left">BIGINT</td><td align="left">8</td></tr></tbody></table><p>字符串类型</p><table><thead><tr><th align="left">类型</th><th align="left">存储 (字节)</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">char(n)</td><td align="left">n</td><td align="left">定长字节：指定多少字节就为多少字节，(n为数字，范围：0-255)</td></tr><tr><td align="left">varchar(n)</td><td align="left">n</td><td align="left">不定长字节：长度跟存储的数据相匹配，最大n字节。(n为数字，范围：0-255)</td></tr></tbody></table><h3 id="主键-PRIMARY-KEY"><a href="#主键-PRIMARY-KEY" class="headerlink" title="主键 (PRIMARY KEY)"></a>主键 (PRIMARY KEY)</h3><p>表中的一个或多个字段，它的值用于唯一地标识表中的某一条记录，用来保持数据的完整性</p><p>特定：</p><ul><li>一个表中只能有一个主键</li><li>主键可以是一个字段，也可以由多个字段组成</li><li>主键值不能重复</li><li>可加快对数据的操作</li></ul><h3 id="索引-INDEX"><a href="#索引-INDEX" class="headerlink" title="索引 (INDEX)"></a>索引 (INDEX)</h3><p>对表中一列或者多列的值进行排序的一种结构，使用索引可以加快访问表中特定的信息，加快对表中记录的查找或排序</p><h2 id="命令语句"><a href="#命令语句" class="headerlink" title="命令语句"></a>命令语句</h2><p>连接数据库</p><pre><code>-- 可使用 --host 参数连接外部数据库mysql -uroot -p </code></pre><p>授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 运行外部主机连接到mysql服务器，需要授权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> 库名.表名 <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'IP地址'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'密码'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名称 <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_bin;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> 数据库名称;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 比较完整的表创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user2 (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  age <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  gender ENUM(<span class="string">'男'</span>, <span class="string">'女'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>),</span><br><span class="line">  <span class="keyword">INDEX</span> uname(username),</span><br><span class="line">  <span class="keyword">INDEX</span> age(age)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (username, age) <span class="keyword">VALUES</span> (<span class="string">'Tom'</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (username, age, gender) <span class="keyword">VALUES</span> (<span class="string">'Mane'</span>, <span class="number">22</span>, <span class="string">'男'</span>),(<span class="string">'Jone'</span>, <span class="number">20</span>, <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> age=<span class="number">13</span>,gender=<span class="string">'女'</span> <span class="keyword">WHERE</span> username=<span class="string">'Tom'</span>;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TO/AS 都可以</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p>删除表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DELETE 删除表的数据，保留结构，支持事务</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- TRUNCATE 删除表的数据，保留结构，不支持事务，不可撤销恢复</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> gender <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="keyword">count</span>(gender) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure><p>条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- &gt;、&gt;=、&lt;&gt;、&lt;、&lt;=、AND、OR、LIKE、BETWEEN、LIKE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- BETWEEN 查询在某个区间的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- LIKE 模糊查询，'%B%'(包含B),'B%'(B开头)，'%B'(B结尾)，'_o%'(下划线表示单个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'B%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>　<span class="keyword">user</span> <span class="keyword">WHERE</span> username <span class="keyword">IN</span> (<span class="string">'Tom'</span>, <span class="string">'Jone'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username REGEXP <span class="string">'e$'</span>;</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DESC 降序， </span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>限制和偏移</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从第二条数据开始查询两条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LIMIT</span> <span class="number">2</span> <span class="keyword">OFFSET</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 上面的语句可简写为</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：ORDER BY 必须在 LIMIT 之前 WHERE(GROUP BY)之后</span></span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- count、sum、avg、lcase、ucase、len ...</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">UCASE</span>(usrename)=<span class="keyword">UCASE</span>(<span class="string">'tom'</span>)</span><br></pre></td></tr></table></figure><p>联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>, message <span class="keyword">WHERE</span> user.id = message.uid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> message (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  uid <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">content</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>多表查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 下面的语句结果跟内连接一样</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>, message <span class="keyword">WHERE</span> user.id = message.uid;</span><br></pre></td></tr></table></figure><p>内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">JOIN</span> message <span class="keyword">ON</span> user.id = message.uid</span><br></pre></td></tr></table></figure><p>左连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> message <span class="keyword">ON</span> user.id = message.uid;</span><br></pre></td></tr></table></figure><h2 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h2><p>Sequelize 是一个基于 promise 的 Node.js ORM (Object Relational Mapping)，目前支持 Postgres, MySQL，SQLite 和 Microsoft SQL Server。它具有强大的事务支持，关联关系，读取和复制等功能</p><pre><code>npm i sequelize mysql2</code></pre><p>模型对象.save()</p><ul><li>验证该实例，如果通过验证，则持久化到数据库中</li></ul><p>模型对象.update(updates:Object)</p><ul><li>要更新的字段，调用该方法等同于调用.set()然后.save()</li></ul><p>模型对象.destroy()</p><ul><li>销毁该实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  database: <span class="string">'test'</span>, </span><br><span class="line">  username: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">''</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  port: <span class="number">3306</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建sequelize对象实例</span></span><br><span class="line"><span class="comment">// const sequelize = new Sequelize('mysql://localhost:3306/database', &#123;&#125;) //url 形式</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, &#123;</span><br><span class="line">  host: config.host,</span><br><span class="line">  dialect: <span class="string">'mysql'</span>,</span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    idle: <span class="number">30000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sequelize.authenticate().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'连接失败'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义模型</span></span><br><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(<span class="string">'User'</span>, &#123;</span><br><span class="line">  id: &#123;</span><br><span class="line">    type: Sequelize.INTEGER(<span class="number">11</span>),</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    autoIncrement: <span class="literal">true</span>,</span><br><span class="line">    primaryKey: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: Sequelize: STRING(<span class="number">50</span>),</span><br><span class="line">    allowNull: <span class="literal">false</span>, <span class="comment">// 所有字段默认为 true</span></span><br><span class="line">    defaultValue: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  age: &#123;</span><br><span class="line">    type: Sequelize.TINYINT,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    defaultValue: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  gender: &#123;</span><br><span class="line">    type: Sequelize.ENUM(<span class="string">'男'</span>, <span class="string">'女'</span>),</span><br><span class="line">    allowNull:<span class="literal">false</span>,</span><br><span class="line">    defaultValue: <span class="string">'男'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  timeStamps: <span class="literal">false</span>, <span class="comment">// 是否给每条记录添加createdAt 会 updatedAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true</span></span><br><span class="line">  tableName: <span class="string">'user'</span>, <span class="comment">// 手动设置表的实际名称</span></span><br><span class="line">  paranoid: <span class="literal">false</span>,<span class="comment">// 设置 deletedAt 字段，当删除记录的时候，并不是真的烧毁记录，而是通过该字段来标志，即保留数据，进行假删除，默认为 false</span></span><br><span class="line">  indexes: [</span><br><span class="line">    &#123;</span><br><span class="line">      uname: <span class="string">'uname'</span>,</span><br><span class="line">      field: [<span class="string">'username'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'age'</span>,</span><br><span class="line">      fields: [<span class="string">'age'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据</span></span><br><span class="line"><span class="comment">// let tom = new UserModel()</span></span><br><span class="line"><span class="comment">// 通过new 或者 build出来的对象不会立即同步到数据库中，需要辅助其他函数</span></span><br><span class="line"><span class="keyword">let</span> tom = UserModel.build(&#123; <span class="comment">// UserModel.create</span></span><br><span class="line">  username: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  gender: <span class="string">'男'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">tom.set(<span class="string">'age'</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">tom.save()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找数据</span></span><br><span class="line"><span class="keyword">let</span> fa = <span class="keyword">await</span> User.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    <span class="comment">// age: 18, //等同于 age: &#123;[Sequelize.Op.eq]: 18&#125;</span></span><br><span class="line">    <span class="comment">// limit: 2, </span></span><br><span class="line">    <span class="comment">// offset: 2,</span></span><br><span class="line">    <span class="comment">// order: [['age','desc']],</span></span><br><span class="line">    [Sequelize.Op.or]: [ <span class="comment">// 多条件</span></span><br><span class="line">      &#123;</span><br><span class="line">        age: &#123;[Sequelize.Op.gt]: <span class="number">30</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        gender: <span class="string">'女'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rs = <span class="keyword">await</span> UserModel.findOne(&#123;<span class="attr">where</span>: &#123;<span class="attr">username</span>: <span class="string">'Tom'</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">let</span> count = <span class="keyword">await</span> UserModel.count()</span><br><span class="line"><span class="keyword">let</span> cf = <span class="keyword">await</span> UserModel.findAndCountAll(&#123;<span class="attr">limit</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>)</span><br><span class="line">t.set(<span class="string">'age'</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">await</span> t.save()</span><br><span class="line"></span><br><span class="line"><span class="comment">// await t.update(&#123;age: 20&#125;) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="comment">// t.destroy()</span></span><br></pre></td></tr></table></figure><h2 id="关联查询与预加载"><a href="#关联查询与预加载" class="headerlink" title="关联查询与预加载"></a>关联查询与预加载</h2><pre><code>HasOne: model1.hasOne(model2) // 1对1HasMany: model1.hasMany(model2) // 1对多BelongsTo: model1.belongsTo(model2) // 属于BelongsToMany: model1.belongsToMany(model2)model1.findOne({include[model2])</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 设置外键关系</span></span><br><span class="line">uid: &#123;</span><br><span class="line">  type: Sequelize.INTEGER(<span class="number">10</span>),</span><br><span class="line">  defaultValue: <span class="number">0</span>,</span><br><span class="line">  references: &#123;</span><br><span class="line">    model: UserModel,</span><br><span class="line">    key: <span class="string">'id'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageModel.belongsTo(UserModel, &#123;</span><br><span class="line">  foreignKey: uid</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> MessageModel.findByPk(<span class="number">1</span>, &#123;<span class="attr">include</span>: [UserModel]&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(data.User.username)</span><br><span class="line"></span><br><span class="line">UserModel.hasMany(MessageModel, &#123;</span><br><span class="line">  foreignKey: <span class="string">'uid'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> data2 = <span class="keyword">await</span> UserModel.findByPk(<span class="number">3</span>, &#123;</span><br><span class="line">  include: [MessageModel]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><p>就像git一样，我们可以使用Sequelize迁移来帮助我们跟踪数据库的更改，并在各个不同时期的数据库状态之间进行切换</p><p>使用Sequelize迁移，需要安装sequelize-cli工具，sequelize-cli依赖sequelize</p><p>安装</p><pre><code>npm i sequelize-clinpm i sequelize</code></pre><p>初始化</p><pre><code>&gt; sequelize init初始化sequelize项目，该命令将创建如下目录：  - config: 包含配置文件，它告诉CLI如何连接数据库  - models:   - migrations: 包含所有迁移文件  - seeders: 包含所有的种子文件</code></pre><p>创建/删除数据库</p><pre><code>根据配置创建或删除数据库&gt; sequelize db:create  &gt; sequelize db:drop</code></pre><p>配置环境变量</p><pre><code>set NODE_ENV=testecho %NODE_ENV%还原原来的开发环境set NODE_ENV=</code></pre><p>创建模型</p><pre><code>&gt; sequelize model:generate或者&gt; sequelize model:create会创建一个模型文件--name: 模型名称，必须--attributes: 字段列表，必须示例：sequelize model:create --name User --attributes username:STRING</code></pre><p>执行迁移</p><pre><code>所谓迁移，就是怼数据库进行结构的创建，升级（修改）等操作&gt; sequelize db:migrate  - 会在数据库中创建一个SequelizeMeta表，用于记录每次迁移记录  - 执行migrations文件下满足玩家(SequelizeMeta表)撤销&gt; sequelize db:migrate:undo  - 撤销最近的迁移操作&gt; sequelize db:migrate:undo:all  - 撤销所有的迁移操作&gt; sequelize db:migrate:undo --name  - 撤销具体迁移脚本</code></pre><p>添加新字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  up: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.addColumn(</span><br><span class="line">      <span class="string">'users'</span>, </span><br><span class="line">      <span class="string">'age'</span>, </span><br><span class="line">      &#123;</span><br><span class="line">        type: Sequelize.TINYINT,</span><br><span class="line">        allowNull: <span class="literal">false</span>,</span><br><span class="line">        defaultValue: <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  down: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.removeColum(<span class="string">'users'</span>,<span class="string">'age'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>种子</p><pre><code>创建种子文件&gt; sequelize seed:create --name userTest运行种子文件&gt; sequelize db:seed:all撤销&gt; sequelize db:seed:undo:all</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  up: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 插入测试数据</span></span><br><span class="line">    <span class="keyword">return</span> queryInterface.bulkInsert(<span class="string">'users'</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        username: <span class="string">'Tom'</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        username: <span class="string">'Jane'</span>,</span><br><span class="line">        age: <span class="number">14</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  down: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.bulkDelete(<span class="string">'users'</span>,<span class="literal">null</span>, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 的核心原理</title>
      <link href="/blog/2019/12/28/vue/vue-core/"/>
      <url>/blog/2019/12/28/vue/vue-core/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p>作用：直接在一个对象上定义一个新属性，或者修改一个对象现有的属性</p><p>语法：Object.defineProperty(obj, prop, descriptor)</p><p>descriptor 为被定义或修改的描述符</p><ul><li>数据描述<ul><li><code>configurable</code> : 是否可以被删除，默认 false</li><li><code>enumerable</code> : 是否可以被枚举， 默认 false</li><li><code>value</code> : 属性的值，默认为 undefined</li><li><code>writable</code> : 是否可以被重写， 默认 false</li></ul></li><li>访问器描述<ul><li>getter : 获取属性值得方法</li><li>setter: 设置属性值得方法</li><li>注意：可以写 configurable, enumerable, 不能写 value, writable<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'title'</span>, &#123;</span><br><span class="line">  value: <span class="string">'hello world'</span>, </span><br><span class="line">  enumerable: <span class="literal">true</span>, </span><br><span class="line">  writable: <span class="literal">true</span>,  </span><br><span class="line">  configurable: <span class="literal">true</span>,  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="vue-的响应式原理"><a href="#vue-的响应式原理" class="headerlink" title="vue 的响应式原理"></a>vue 的响应式原理</h2><p>把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项， Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter，Vue 内部会对数据进行劫持操作，进而追踪依赖，在属性访问和修改时通知变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">      title: <span class="string">'hello world'</span>,</span></span><br><span class="line"><span class="actionscript">      active: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    title = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>)</span></span><br><span class="line">    observer(data)</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      data.title = <span class="string">'Vue'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">observer</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">        defineReactive(obj, item, obj[item])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span><span class="params">(obj, key, value)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">get</span>() &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> value</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="keyword">set</span>(newValue) &#123;</span></span><br><span class="line">          value = newValue</span><br><span class="line">          title.innerHTML = newValue</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/blog/2019/12/22/database/mongodb/"/>
      <url>/blog/2019/12/22/database/mongodb/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><p>启动数据库服务</p><pre><code>mongod</code></pre><p>开启mongo客户端</p><pre><code>mongo --dbpath=C:/data</code></pre><a id="more"></a><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>1、查看有哪些数据库</p><pre><code>show dbs</code></pre><p>2、 使用/创建数据库(需要插入数据，数据库才会创建成功)</p><pre><code>use dbname</code></pre><p>3、 插入数据到表user</p><pre><code>db.user.insert({&apos;name&apos;: &apos;zhy&apos;, &apos;age&apos;: 12})</code></pre><p>4、 查看有哪些表</p><pre><code>show collections</code></pre><p>5、 查询表中所有记录</p><pre><code>db.user.find()</code></pre><p>6、 查询 age = 12 的记录</p><pre><code>db.user.find({&apos;age&apos;: 12})</code></pre><p>7、 查询 age &gt; 12 的数据 (<code>$lt</code> &lt;, <code>$gte</code> &gt;=, <code>$lte</code> &lt;=, )</p><pre><code>db.user.find({&apos;age&apos;: {$gt:12})</code></pre><p>8、 模糊查询</p><pre><code>db.article.find({&apos;title&apos;: /文章/})</code></pre><p>9、 查询指定列</p><pre><code>db.user.find({}, {name:1,age:1})</code></pre><p>10、 排序(-1 降序)</p><pre><code>db.user.find({}).sort(&apos;age&apos;:-1)</code></pre><p>11、 查询前5条数据</p><pre><code>db.user.find({}).limit(5)</code></pre><p>12、 查询3-6的数据</p><pre><code>db.user.find().skip(2).limit(3)</code></pre><p>13、 $or</p><pre><code>db.user.find({$or: [{&apos;age&apos;:20}, {&apos;age&apos;:24}]})</code></pre><p>14、 查询第一条数据</p><pre><code>db.user.findOne()</code></pre><p>15、 统计</p><pre><code>db.user.find().count()</code></pre><p>16、 如果要查询限制之后的记录数量，要使用count(true)</p><pre><code>db.user.find().skip(10).limit(5).count(true)</code></pre><h3 id="删除-修改"><a href="#删除-修改" class="headerlink" title="删除/修改"></a>删除/修改</h3><p>1、 删除集合(里面没有集合，数据库也会自动删除)</p><pre><code>db.user.drop()</code></pre><p>2、 删除数据库</p><pre><code>use dbnamedb.dropDatabase()</code></pre><p>3、 修改数据</p><pre><code>db.user.update({name:&apos;zhy&apos;}, {$set:{name: &apos;Tom&apos;, age: 24}})</code></pre><p>4、 替代那一条数据<br>db.user.update({name:’zhy’}, {‘replace’:true})</p><p>5、 删除某条数据</p><pre><code>db.user.remove({name: &apos;zhy&apos;})</code></pre><p>6、 只删除一条数据</p><pre><code>db.user.remove({age: 12}, {justOne: true})</code></pre><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>1、 设置索引(设置索引可以提高查询速度) 1表示升序索引 -1表示降序</p><pre><code>db.user.ensureIndex({name: 1})</code></pre><p>2、 查看索引</p><pre><code>db.user.getIndexes()</code></pre><p>3、 删除索引</p><pre><code>db.user.dropIndex({name: 1})</code></pre><p>4、 查询具体的执行时间</p><pre><code>db.user.find().explain(&apos;executionStats&apos;)</code></pre><p>5、 复合索引</p><pre><code>db.user.ensureIndex({name: 1, age: -1})</code></pre><p>基于name 和 age 或者基于name 的查询会用到该索引，但是基于age的不会</p><p>6、 唯一索引(值只能是唯一的)</p><pre><code>db.user.ensureIndex({name: 1}, {unique: true})</code></pre><h2 id="在-node-中的使用-mongodb"><a href="#在-node-中的使用-mongodb" class="headerlink" title="在 node 中的使用 mongodb"></a>在 node 中的使用 mongodb</h2><p>引包：</p><pre><code>npm install mongodb --save</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'mongodb://127.0.0.1:27017'</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">'test'</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.db = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.connect()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  connect () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.db) &#123; </span><br><span class="line">        MongoClient.connect(url, &#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;, (err, client) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.db = client.db(dbName) </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'connect'</span>)</span><br><span class="line">            resolve(<span class="keyword">this</span>.db)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.db)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  find (table, json) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'find'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.connect().then(<span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">        db.collection(table).find(json).toArray(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(docs)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Db()</span><br></pre></td></tr></table></figure><h2 id="在-node-中使用-mongoose"><a href="#在-node-中使用-mongoose" class="headerlink" title="在 node 中使用 mongoose"></a>在 node 中使用 mongoose</h2><p>mongoose 是在 nodejs 异步环境下对 mongondb 进行便捷操作的对象模型工具。它是 nodejs 的驱动，不能作为其他语言的驱动。</p><p>特点：</p><ul><li>通过关系型数据库的思想来设置非关系型数据库</li><li>基于 mongodb 驱动，简化操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongondb://127.0.0.1:27017/test'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mongodb connecting ...'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、实例化数据模板</span></span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>, <span class="comment">// 表示必须传入这个数据</span></span><br><span class="line">        unique: <span class="literal">true</span> <span class="comment">// 唯一索引 (而 index: true  为普通索引)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: <span class="built_in">String</span>, <span class="comment">// 或者 password: 'string' 都可以</span></span><br><span class="line">    date: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now, <span class="comment">// 默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、定义数据模型</span></span><br><span class="line"><span class="comment">// 这个模型会和模型名称相同的复数的数据库表建立连接， 第一个参数首字母大写</span></span><br><span class="line"><span class="keyword">let</span> User = mongoose.model(<span class="string">"User"</span>, UserSchema) <span class="comment">// 关联的是users表</span></span><br><span class="line"><span class="comment">// let User = mongoose.model('User', UserSchema, 'user') // 关联的是user表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找数据</span></span><br><span class="line">User.find(&#123;&#125;, (err, doc) =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加数据</span></span><br><span class="line"><span class="keyword">let</span> us = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  email: <span class="string">'xxx'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或者 us.name = 'Tom'</span></span><br><span class="line">us.save(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">User.updateOne(&#123;<span class="string">'_id'</span>: <span class="string">'5d42933e6258d24ddca1fdd3'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'Jane'</span>&#125;, (err, doc) =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">User.deleteOne(&#123;<span class="string">'_id'</span>: <span class="string">'5d42933e6258d24ddca1fdd3'</span>&#125;, (err, doc) =&gt; &#123;&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router.routes()</span><br></pre></td></tr></table></figure><h3 id="mongoose-预定义模式修饰符"><a href="#mongoose-预定义模式修饰符" class="headerlink" title="mongoose 预定义模式修饰符"></a>mongoose 预定义模式修饰符</h3><p>lowercase uppercase trim</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Schema = <span class="built_in">require</span>(<span class="string">'mongoose'</span>).Schema</span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        trim: <span class="literal">true</span> <span class="comment">// 清除两边空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Mongose-Geters-与-Setters-自定义修饰符"><a href="#Mongose-Geters-与-Setters-自定义修饰符" class="headerlink" title="Mongose Geters 与 Setters 自定义修饰符"></a>Mongose Geters 与 Setters 自定义修饰符</h3><p>除了 mongoose 内置的修饰符以外，我们还可以通过 set （建议使用）， 也可以通过 get （不建议使用）<br>修饰符在增加数据的时候对数据进行格式化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    redirect: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">set</span> (params) &#123;</span><br><span class="line">      <span class="comment">// params 可获取 redirect 的值</span></span><br><span class="line">      <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (params.indexOf(<span class="string">'http://'</span>) &amp;&amp; params.indexOf(<span class="string">'https://'</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'http://'</span> + params</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="扩展内置方法"><a href="#扩展内置方法" class="headerlink" title="扩展内置方法"></a>扩展内置方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展静态方法 (访问方式：UserSchema.findByName())</span></span><br><span class="line"></span><br><span class="line">UserSchema.statics.findByName = <span class="function"><span class="keyword">function</span> (<span class="params">name, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.find(&#123;<span class="string">'name'</span>: name&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">    callback(err, docs)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展实例方法 (访问方式：let user = new UserModel(); user.print())</span></span><br><span class="line"></span><br><span class="line">UserSchema.methods.print =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ul><li>required: 表示这个数据必须传入 （任意类型）</li><li>max: 用于 Number 类型数据， 最大值</li><li>min: 用于 Number 类型数据， 最小值</li><li>enum: 枚举类型，要求数据必须满足枚举值 enum: [‘Mon’, ‘Tus’], (String)</li><li>match: 增加的数据必须符合 match (正则) 的规则 （ match: /^z(.*)/ ），(String)</li><li>maxlength: 最大长度，(String)</li><li>minlength: 最小长度, (String)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    validate(param) &#123; <span class="comment">// 自定义验证器</span></span><br><span class="line">        <span class="keyword">return</span> param.length &gt;= <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a>聚合管道</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OrderModel.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $lookup: &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">'order_item'</span>, <span class="comment">// order表关联order_item表 </span></span><br><span class="line">            localField: <span class="string">'order_id'</span>, <span class="comment">// order表中的 order_id</span></span><br><span class="line">            foreignField: <span class="string">'order_id'</span>, <span class="comment">// foreignField表中的 order_id</span></span><br><span class="line">            <span class="keyword">as</span>: <span class="string">'items'</span> <span class="comment">// 放到 items 字段中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            $match: &#123;<span class="string">'all_price'</span>: &#123;<span class="attr">$gte</span>: <span class="number">90</span>&#125;&#125; <span class="comment">// 查询条件</span></span><br><span class="line">            <span class="comment">// $match: &#123;'_id': mongoose.Types.ObjectId('5d42938d6258d24ddca1fdd4')&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">], (err, docs) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ArticleSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    cid: &#123; <span class="attr">type</span>: Schema.Types.ObjectId &#125;,</span><br><span class="line">    author_id: &#123; <span class="attr">type</span>: Schema.Types.ObjectId &#125;,</span><br><span class="line">    author_name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>&#125;,</span><br><span class="line">    description: <span class="built_in">String</span>,</span><br><span class="line">    order: &#123;<span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">100</span>&#125;,</span><br><span class="line">    content: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ArticleCateSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    description: <span class="built_in">String</span>,</span><br><span class="line">    addtime: &#123; <span class="attr">type</span>: <span class="built_in">Date</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    username: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    sex: <span class="built_in">String</span>,</span><br><span class="line">    tel: <span class="built_in">Number</span>,</span><br><span class="line">    status: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ArticleModel.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $lookup: &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">'articlecate'</span>,</span><br><span class="line">            localField: <span class="string">'cid'</span>,</span><br><span class="line">            foreignField: <span class="string">'_id'</span>,</span><br><span class="line">            <span class="keyword">as</span>: <span class="string">'cate'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">        $lookup: &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">'articlecate'</span>,</span><br><span class="line">            localField: <span class="string">'author_id'</span>,</span><br><span class="line">            foreignField: <span class="string">'_id'</span>,</span><br><span class="line">            <span class="keyword">as</span>: <span class="string">'user'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">], (err, docs) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fullscreenchange</title>
      <link href="/blog/2019/12/07/js/fullscreen/"/>
      <url>/blog/2019/12/07/js/fullscreen/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><p>点击一张图片使其在全屏和不全屏间切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3209370120,2008812818&amp;fm=26&amp;gp=0.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">$img = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript">$img.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenElement) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 取消全屏</span></span></span><br><span class="line">    exitFullscreen()</span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 进入全屏</span></span></span><br><span class="line"><span class="actionscript">    requestFullscreen(<span class="keyword">this</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">requestFullscreen</span><span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (el.requestFullscreen) &#123;</span></span><br><span class="line">      el.requestFullscreen()</span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.mozRequestFullScreen) &#123;</span></span><br><span class="line">      el.mozRequestFullScreen()</span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.msRequestFullscreen) &#123;</span></span><br><span class="line">      el.msRequestFullscreen()</span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.webkitRequestFullscreen) &#123;</span></span><br><span class="line">      el.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.exitFullscreen()</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.mozCancelFullScreen()</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.msExitFullscreen) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.msExitFullscreen()</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.webkitExitFullScreen()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">'fullscreenchange'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 每次切换全屏模式都会触发fullscreenchange事件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="built_in">document</span>.fullscreenElement) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">`Element: <span class="subst">$&#123;<span class="built_in">document</span>.fullscreenElement.id&#125;</span> entered full-screen mode.`</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'Leaving full-screen mode.'</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shadow DOM</title>
      <link href="/blog/2019/12/02/js/shadow-dom/"/>
      <url>/blog/2019/12/02/js/shadow-dom/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><p>there are times where an element requires complete encapsulation and we don’t want it to be affected by even global styles.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"shadow-host"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://twitter.com/ireaderinokun"</span>&gt;</span></span><br><span class="line">      Follow @ireaderinokun </span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Note that we didn’t just use the &lt;a&gt; element as the shadow host, because certain elements, primarily interactive elements, can’t be shadow hosts. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> shadowE1 = <span class="built_in">document</span>.querySelector(<span class="string">".shadow-host"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> shadow = shadowE1.attachShadow(&#123;mode: <span class="string">'open'</span>&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Although the regular HTML children are viewable in the inspector, they are no longer visible on the page as the shadow root takes over.</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Next, we want to create the content to form our new shadow tree</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="actionscript">    link.href = shadowE1.querySelector(<span class="string">"a"</span>).href;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    link.innerHTML = `<span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-label</span>=<span class="string">"Twittter icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">                      $&#123;shadowE1.querySelector(<span class="string">"a"</span>).textContent&#125;`;</span></span><br><span class="line">    shadow.appendChild(link);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//Finally, we can add some styles by creating a &lt;style&gt; element and appending that to the shadow root too.</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> styles = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span></span><br><span class="line">    styles.textContent = `</span><br><span class="line">    a, span &#123;</span><br><span class="line">      vertical-align: top;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">        height: 20px;</span><br><span class="line">        padding: 1px 8px 1px 6px;</span><br><span class="line">        background-color: #1b95e0;</span><br><span class="line">        color: #fff;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">        font-size: 11px;</span><br><span class="line"><span class="actionscript">        font-family:<span class="string">'Helvetica Neue'</span>, Arial, sans-serif;</span></span><br><span class="line">        line-height: 18px;</span><br><span class="line">        text-decoration: none;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a:hover &#123;  background-color: #0c7abf; &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: 2px;</span><br><span class="line">        width: 14px;</span><br><span class="line">        height: 14px;</span><br><span class="line"><span class="vbscript">        margin-<span class="built_in">right</span>: <span class="number">3</span>px;</span></span><br><span class="line">        background: transparent 0 0 no-repeat;</span><br><span class="line"><span class="actionscript">        background-image: url(data:image/svg+xml,%<span class="number">3</span>Csvg%<span class="number">20</span>xmlns%<span class="number">3</span>D%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fwww.w3.org%<span class="number">2</span>F2000%<span class="number">2</span>Fsvg%<span class="number">22</span>%<span class="number">20</span>viewBox%<span class="number">3</span>D%<span class="number">220</span>%<span class="number">200</span>%<span class="number">2072</span>%<span class="number">2072</span>%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>Cpath%<span class="number">20</span>fill%<span class="number">3</span>D%<span class="number">22</span>none%<span class="number">22</span>%<span class="number">20</span>d%<span class="number">3</span>D%<span class="number">22</span>M0%<span class="number">200</span>h72v72H0z%<span class="number">22</span>%<span class="number">2</span>F%<span class="number">3</span>E%<span class="number">3</span>Cpath%<span class="number">20</span><span class="keyword">class</span>%<span class="number">3</span>D%<span class="number">22</span>icon%<span class="number">22</span>%<span class="number">20</span>fill%<span class="number">3</span>D%<span class="number">22</span>%<span class="number">23</span>fff%<span class="number">22</span>%<span class="number">20</span>d%<span class="number">3</span>D%<span class="number">22</span>M68<span class="number">.812</span>%<span class="number">2015.14</span>c<span class="number">-2.348</span>%<span class="number">201.04</span><span class="number">-4.87</span>%<span class="number">201.744</span><span class="number">-7.52</span>%<span class="number">202.06</span>%<span class="number">202.704</span><span class="number">-1.62</span>%<span class="number">204.78</span><span class="number">-4.186</span>%<span class="number">205.757</span><span class="number">-7.243</span><span class="number">-2.53</span>%<span class="number">201.5</span><span class="number">-5.33</span>%<span class="number">202.592</span><span class="number">-8.314</span>%<span class="number">203.176</span>C56<span class="number">.35</span>%<span class="number">2010.59</span>%<span class="number">2052.948</span>%<span class="number">209</span>%<span class="number">2049.182</span>%<span class="number">209</span>c<span class="number">-7.23</span>%<span class="number">200</span><span class="number">-13.092</span>%<span class="number">205.86</span><span class="number">-13.092</span>%<span class="number">2013.093</span>%<span class="number">200</span>%<span class="number">201.026</span><span class="number">.118</span>%<span class="number">202.02</span><span class="number">.338</span>%<span class="number">202.98</span>C25<span class="number">.543</span>%<span class="number">2024.527</span>%<span class="number">2015.9</span>%<span class="number">2019.318</span>%<span class="number">209.44</span>%<span class="number">2011.396</span>c<span class="number">-1.125</span>%<span class="number">201.936</span><span class="number">-1.77</span>%<span class="number">204.184</span><span class="number">-1.77</span>%<span class="number">206.58</span>%<span class="number">200</span>%<span class="number">204.543</span>%<span class="number">202.312</span>%<span class="number">208.552</span>%<span class="number">205.824</span>%<span class="number">2010.9</span><span class="number">-2.146</span><span class="number">-.07</span><span class="number">-4.165</span><span class="number">-.658</span><span class="number">-5.93</span><span class="number">-1.64</span><span class="number">-.002</span><span class="number">.056</span><span class="number">-.002</span><span class="number">.11</span><span class="number">-.002</span><span class="number">.163</span>%<span class="number">200</span>%<span class="number">206.345</span>%<span class="number">204.513</span>%<span class="number">2011.638</span>%<span class="number">2010.504</span>%<span class="number">2012.84</span><span class="number">-1.1</span><span class="number">.298</span><span class="number">-2.256</span><span class="number">.457</span><span class="number">-3.45</span><span class="number">.457</span><span class="number">-.845</span>%<span class="number">200</span><span class="number">-1.666</span><span class="number">-.078</span><span class="number">-2.464</span><span class="number">-.23</span>%<span class="number">201.667</span>%<span class="number">205.2</span>%<span class="number">206.5</span>%<span class="number">208.985</span>%<span class="number">2012.23</span>%<span class="number">209.09</span><span class="number">-4.482</span>%<span class="number">203.51</span><span class="number">-10.13</span>%<span class="number">205.605</span><span class="number">-16.26</span>%<span class="number">205.605</span><span class="number">-1.055</span>%<span class="number">200</span><span class="number">-2.096</span><span class="number">-.06</span><span class="number">-3.122</span><span class="number">-.184</span>%<span class="number">205.794</span>%<span class="number">203.717</span>%<span class="number">2012.676</span>%<span class="number">205.882</span>%<span class="number">2020.067</span>%<span class="number">205.882</span>%<span class="number">2024.083</span>%<span class="number">200</span>%<span class="number">2037.25</span><span class="number">-19.95</span>%<span class="number">2037.25</span><span class="number">-37.25</span>%<span class="number">200</span><span class="number">-.565</span><span class="number">-.013</span><span class="number">-1.133</span><span class="number">-.038</span><span class="number">-1.693</span>%<span class="number">202.558</span><span class="number">-1.847</span>%<span class="number">204.778</span><span class="number">-4.15</span>%<span class="number">206.532</span><span class="number">-6.774</span>z%<span class="number">22</span>%<span class="number">2</span>F%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fsvg%<span class="number">3</span>E);</span></span><br><span class="line">    &#125;</span><br><span class="line">    `;</span><br><span class="line"></span><br><span class="line">    shadow.appendChild(styles);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://bitsofco.de/what-is-the-shadow-dom/" target="_blank" rel="noopener">what-is-the-shadow-dom</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Browser Rendering</title>
      <link href="/blog/2019/11/24/browser/browser-rendering/"/>
      <url>/blog/2019/11/24/browser/browser-rendering/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><img src="/blog/2019/11/24/browser/browser-rendering/HTML-to-Render-Tree-to-Final.png"><a id="more"></a><h2 id="从-HTML-原始字节到-DOM"><a href="#从-HTML-原始字节到-DOM" class="headerlink" title="从 HTML 原始字节到 DOM"></a>从 HTML 原始字节到 DOM</h2><p>Bytes =&gt; Charaters =&gt; Tokens =&gt; Node =&gt; DOM</p><ul><li><p>what is <code>token</code>?</p><ul><li>Essentially, an html file is broken down into small units of parsing called tokens.This is how the browser begins to understand whate you’ve written.</li></ul></li><li><p><code>node</code> is a separate entity within the document object tree</p></li><li><p>The <code>DOM</code> establishes the parent-child relationships, adjacent sibling relationships etc.</p></li></ul><p>HTML 文档：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list__item"</span>&gt;</span>List item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>=&gt; DOM 树</p><ul><li>html<ul><li>header <code>lang=&quot;en&quot;</code></li><li>body<ul><li>ul <code>class=&quot;list&quot;</code><ul><li>li <code>class=&quot;list_item&quot;</code><ul><li>“List item”</li></ul></li></ul></li></ul></li></ul></li></ul><p>注意：</p><ul><li><p>DOM 与源 HTML 文档中的不同之处</p><ul><li><p>DOM 是有效 HTML 文档的接口。例如，当源 HTML 文档中的内容为<code>&lt;html&gt;Hello World&lt;/html&gt;</code>的时候，浏览器会自动更正一些无效的HTML代码。结果会在 DOM 树中会找到<code>head</code>和<code>body</code>节点</p></li><li><p>DOM 可以被 js 代码修改，例如在 js 代码中添加或修改节点都会影响到 DOM</p></li></ul></li><li><p>因为 DOM 是从源 HTML 文档中构建来的，不包括加在它身上的样式。所以 DOM 中不包含伪元素(例如，::after)。这也 js 无法定位到伪元素的原因。</p></li></ul><h2 id="从-CSS-原始字节到-CSSOM"><a href="#从-CSS-原始字节到-CSSOM" class="headerlink" title="从 CSS 原始字节到 CSSOM"></a>从 CSS 原始字节到 CSSOM</h2><p>浏览器是从 <code>html</code> 开始解析的，当发现 <code>link</code> 标签时，会开辟一个线程去发起请求取css文件数据。DOM 的构建仍会继续</p><p>生成 CSSOM 的过程与 DOM 一样<br>Bytes =&gt; Charaters =&gt; Tokens =&gt; Nodes =&gt; CSSOM</p><p>css 有时叫做 Cascade 是因为浏览器会迭代遍历 css 树结构来确定影响某个元素的样式（子元素的样式会受其父元素样式的影响）</p><h2 id="The-render-tree"><a href="#The-render-tree" class="headerlink" title="The render tree"></a>The render tree</h2><p>DOM 和 CSSOM 是两个独立的树形结构，DOM 包含有关页面HTML元素关系的所有信息，而 CSSOM 包含有关元素的样式信息。把 DOM 和 CSSOM 结合在一起就是 Render Tree</p><p>Render Tree 包含页面上所有可见 DOM 内容的信息，以及不同节点所需的所有 CSSOM 信息。<br>注意：<code>dispaly: none</code> 的元素不存在 Render Tree 中，但存在 DOM 中</p><h2 id="Lay’em-Out-and-Paint"><a href="#Lay’em-Out-and-Paint" class="headerlink" title="Lay’em Out and Paint"></a>Lay’em Out and Paint</h2><p>浏览器根据浏览器视窗计算每个元素的具体大小和位置，这个步骤考虑到从 DOM 和<br>CSSOM 接收到的内容和样式，并完成所有必要的布局计算，这个过程也叫做回流(reflow)</p><p>最后一步，就是把节点绘制到屏幕上</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><p>当解析器遇到 <code>script</code> 标签时，DOM 的构建会被停止，直到 script 代码执行完毕。当放到头部的 js 代码涉及到 DOM 操作时就会失败，这是因为body 标签及其内容还没有被解析到。这也是为什么 script 标签放到 body 标签底部的原因。</p></li><li><p>那么当解析到 script 标签，CSSOM 还没有准备好会怎样呢？</p><ul><li>The javascript execution will be halted until the CSSOM is ready.</li><li>With the CSSOM, the JS execution waits. No CSSOM, no JS execution.</li></ul></li></ul><h2 id="async-属性"><a href="#async-属性" class="headerlink" title="async 属性"></a>async 属性</h2><p>把 <code>async</code> 关键字添加到 <code>script</code> 标签, 其作用是：DOM 的构建不会停止，script 下载完成后执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://some-link-to-app.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>DOM: Document Object Model, 浏览器将HTML解析成的树形数据结构。</p></li><li><p>CSSOM: CSS Object Model, 浏览器将CSS解析成的树形数据结构。</p></li><li><p>Render Tree: DOM 和 CSSOM 合并生成的Render Tree。</p></li><li><p>Layout: 计算出 Render Tree 每个节点的具体位置。</p></li><li><p>Painting: 通过显卡，将 Layout 后的节点内容分别呈现到屏幕上。</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>当我们浏览器获得HTML文件后，会自上而下的加载，并在加载过程中进行解析和渲染。</p></li><li><p>加载说的就是获取资源文件的过程，如果在加载过程中遇到外部CSS文件和图片，浏览器会另外发送一个请求，去获取CSS文件和相应的图片，这个请求是异步的，并不会影响HTML文件的加载。</p></li><li><p>但是如果遇到Javascript文件，HTML文件会挂起渲染的进程，等待JavaScript文件加载完毕后，再继续进行渲染。<br>为什么HTML需要等待JavaScript呢？因为JavaScript可能会修改DOM，导致后续HTML资源白白加载，所以HTML必须等待JavaScript文件加载完毕后，再继续渲染，这也就是为什么JavaScript文件在写在底部body标签前的原因。</p></li></ul><h2 id="DOM的重绘-Repaint-与回流-Reflow"><a href="#DOM的重绘-Repaint-与回流-Reflow" class="headerlink" title="DOM的重绘(Repaint)与回流(Reflow)"></a>DOM的重绘(Repaint)与回流(Reflow)</h2><ul><li><p>重绘：元素样式的改变（但宽度、大小、位置等不变）</p></li><li><p>回流：元素的大小或者位置发生了变化（当页面布局和几何信息发生变化时），触发了重新布局导致渲染树重新计算布局和渲染，还有，因为回流是根据视口的大小来计算元素的位置和大小的，所以浏览器的窗口尺寸变化也会引发回流</p></li></ul><p>注意：回流一定会触发重绘，而重绘不一定会回流</p><p>参考：<br><a href="https://bitsofco.de/understanding-the-critical-rendering-path/" target="_blank" rel="noopener">understanding-the-critical-rendering-path</a></p><p><a href="https://blog.logrocket.com/how-browser-rendering-works-behind-the-scenes-6782b0e8fb10/" target="_blank" rel="noopener">how-browser-rendering-works-behind-the-scenes</a></p><p><a href="https://www.jianshu.com/p/05eb1b17b298" target="_blank" rel="noopener">https://www.jianshu.com/p/05eb1b17b298</a><br><a href="https://youtu.be/SmE4OwHztCc" target="_blank" rel="noopener">https://youtu.be/SmE4OwHztCc</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> browser </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs的特点</title>
      <link href="/blog/2019/10/31/node/node-feature/"/>
      <url>/blog/2019/10/31/node/node-feature/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h2><p>Node.js is a JavaScript runtime built on <strong><em>Chrome’sV8 JavaScript engine</em></strong>. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficent. Node.js’package ecosystem, <strong><em>npm</em></strong>, is the largest ecosystem of open source libraries in the world.</p><h2 id="nodejs特点"><a href="#nodejs特点" class="headerlink" title="nodejs特点"></a>nodejs特点</h2><ul><li>单线程</li><li>非阻塞I/O</li><li>事件驱动<a id="more"></a></li></ul><h3 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h3><p>在Java、PHP或者.net等服务器语言中，会为每一个客户端连接创建一个新的 进程。而每个线程需要耗费大约2MB内存。也就是说理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。</p><p>Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序上宏观上也是并行的。使用Node.js，一个8GB内存的服务器，可以同时处理超过4万用户的连接。另外，单线程带来的好处还有，操作系统完全不再有线程创建、销毁的时间开销。</p><img src="/blog/2019/10/31/node/node-feature/thread.png" style="height:300px"><h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I/O"></a>非阻塞 I/O</h3><p>在传统的单线程处理机制中，在执行了访问数据库代码之后，整个线程都将暂停下来，等待数据库返回结果，才能执行后面的代码。也就是说，I/O阻塞了代码的执行，极大地降低了程序的执行效率。</p><p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。</p><p>当某个I/O执行完毕时，将以事件形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。</p><p>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>在Node中，客户端请求建立连接，提交数据等行为，会触发响应的事件；在每一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数中途，可以转而处理其他事件（比如，新用户连接），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</p><p>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。</p><img src="/blog/2019/10/31/node/node-feature/event.png" style="height:300px"><h2 id="适合开发什么？"><a href="#适合开发什么？" class="headerlink" title="适合开发什么？"></a>适合开发什么？</h2><p>善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的CPU计算，实际上也是相当于这个计算阻塞了这个单线程，就不适合Node开发。</p><p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与websocket配合，开发长连接的实时交互应用。</p><p>比如：</p><ul><li>用户表单收集</li><li>考试系统</li><li>聊天室</li><li>图文直播</li><li>提供 JSON 的 API （为前台Angular使用）</li></ul><h2 id="比之老牌后台语言"><a href="#比之老牌后台语言" class="headerlink" title="比之老牌后台语言"></a>比之老牌后台语言</h2><p>Node.js本就是极客追求性能极致的产物，缺少了很多服务器的键状性考量。所以Node不可能应用在银行、证券、电信等需要极高可靠性的业务中。</p><p>中国的企业实战中，创业型公司（正处于A轮、B轮）非常爱使用Node做核心任务：</p><ul><li>功夫熊的APP，后台是Node.js在伺服</li><li>实现网，整站都为Node.js搭建</li></ul><p>成熟大企业，基本上都是用Node实现某一方面的功能：</p><ul><li>知乎用了一个Node进程，跑起了“站内信”功能</li><li>百度的很多表单，是用Node保存到数据库的</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生node api笔记</title>
      <link href="/blog/2019/10/31/node/node-api/"/>
      <url>/blog/2019/10/31/node/node-api/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="产生唯一-id"><a href="#产生唯一-id" class="headerlink" title="产生唯一 id"></a>产生唯一 id</h2><p><code>npm i uuid -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(uuid().replace(<span class="regexp">/\-/g</span>, <span class="string">''</span>)) <span class="comment">// 把所有的 - 去掉</span></span><br></pre></td></tr></table></figure><h2 id="获取-后缀名"><a href="#获取-后缀名" class="headerlink" title="获取 后缀名"></a>获取 后缀名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> ext = path.extname(<span class="string">'xx.txt'</span>) <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><ol><li>减少内存占用、增强系统性能（利用率高）</li><li>分3种：读取、写入、读写<ul><li>读取流：req、fs.createReadStream</li><li>写入流：res、fs.createWriteStream</li><li>读写流：zlib.createGzip</li></ul></li><li>把压缩文件发送到浏览器，需要设置响应头<ul><li>res.setHeader(‘Content-Encoding’, ‘gzip’)<a id="more"></a></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line"><span class="comment">// 读写流：压缩，加密</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'www/1.html'</span>) <span class="comment">// 读取流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'www/2.html.gz'</span>) <span class="comment">// 写入流</span></span><br><span class="line"></span><br><span class="line">rs.pipe(gz).pipe(ws)</span><br><span class="line">rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-事件队列"><a href="#EventEmitter-事件队列" class="headerlink" title="EventEmitter 事件队列"></a>EventEmitter 事件队列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Event = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ev = <span class="keyword">new</span> Event()</span><br><span class="line"><span class="comment">// ev监听</span></span><br><span class="line">ev.on(<span class="string">'blu'</span>, (a, b, c) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到了'</span>, a, b, c)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ev触发</span></span><br><span class="line">ev.emit(<span class="string">'blu'</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 返回值为是否有对应监听</span></span><br></pre></td></tr></table></figure><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>)</span><br><span class="line"><span class="keyword">let</span> ip = <span class="string">''</span></span><br><span class="line">dns.lookup(<span class="string">'www.badu.com'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wrong'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ip = data</span><br><span class="line">        <span class="built_in">console</span>.log(data) <span class="comment">//输出百度的ip地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">dns.lookupService(ip, <span class="number">80</span>, (err, data) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">let</span> arr = os.cpus() <span class="comment">// cpu 信息</span></span><br><span class="line"><span class="keyword">let</span> free = os.freemem() <span class="comment">// 空闲内存</span></span><br></pre></td></tr></table></figure><h2 id="Assertion-调试"><a href="#Assertion-调试" class="headerlink" title="Assertion 调试"></a>Assertion 调试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> a == <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> b == <span class="string">'number'</span>, <span class="string">'都得是数字'</span>)</span><br><span class="line">    assert(b != <span class="number">0</span>, <span class="string">'分母不能为0'</span>)</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(divide(a, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="Crypto-加密"><a href="#Crypto-加密" class="headerlink" title="Crypto 加密"></a>Crypto 加密</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = requrie(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">let</span> hash = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">hash.update(<span class="string">'sdl'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure><h2 id="Child-Process-多进程"><a href="#Child-Process-多进程" class="headerlink" title="Child Process 多进程"></a>Child Process 多进程</h2><p>Cluster<br>Process</p><ul><li>只有系统才能完全全新创造进程</li><li>一个程序可以通过复制自己创造新的进程</li><li>子进程不能再创造进程</li><li>主进程和子进程之间能够共享句柄(socket端口)</li></ul><pre><code class="js"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)<span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)<span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>) <span class="comment">// 进程信息</span><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)<span class="keyword">if</span> (cluster.isMaster) { <span class="comment">// 判断是否为主进程，若是主进程则分裂子进程</span>    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) {        cluster.fork()     }    <span class="built_in">console</span>.log(<span class="string">'主进程'</span>)} <span class="keyword">else</span> {    http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> {        <span class="built_in">console</span>.log(<span class="string">`工作进程#<span class="subst">${process.pid}</span>`</span>)    }).listen(<span class="number">3000</span>)}</code></pre><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 快捷键</title>
      <link href="/blog/2019/09/20/others/vscode_shotcut/"/>
      <url>/blog/2019/09/20/others/vscode_shotcut/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="Open-View"><a href="#Open-View" class="headerlink" title="Open/View"></a>Open/View</h2><table><thead><tr><th align="left">快捷键说明</th><th align="left">Window</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">打开命令选项板</td><td align="left">Ctrl+Shift+P</td><td align="left">Ctrl+Shift+P</td></tr><tr><td align="left">访问配置</td><td align="left">Ctrl+,</td><td align="left">Cmd+,</td></tr><tr><td align="left">切换终端</td><td align="left">Ctrl+`</td><td align="left">Ctrl+`</td></tr><tr><td align="left">创建新的终端</td><td align="left">Ctrl+Shift+`</td><td align="left">Ctrl+Shift+`</td></tr><tr><td align="left">切换边栏</td><td align="left">Ctrl+B</td><td align="left">Cmd+B</td></tr><tr><td align="left">打开新的窗口/实例</td><td align="left">Ctrl+Shift+N</td><td align="left">Cmd+Shift+N</td></tr><tr><td align="left">关闭窗口</td><td align="left">Ctrl+W</td><td align="left">Cmd+W</td></tr><tr><td align="left">重新打开被关闭的编辑器</td><td align="left">Ctrl+Shift+T</td><td align="left">Cmd+Shift+T</td></tr><tr><td align="left">跳转到某个文件（选中后按Ctrl+Enter可拆分到另一边显示）</td><td align="left">Ctrl+P</td><td align="left">Cmd+P</td></tr><tr><td align="left">打开文件所在的资源目录</td><td align="left">Ctrl+O</td><td align="left">Cmd+O</td></tr><tr><td align="left">选择主题</td><td align="left">Ctrl+K&amp;T</td><td align="left">Cmd+K&amp;T</td></tr></tbody></table><a id="more"></a><h2 id="Working-With-Files"><a href="#Working-With-Files" class="headerlink" title="Working With Files"></a>Working With Files</h2><table><thead><tr><th align="left">快捷键说明</th><th align="left">Window</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">边栏焦点</td><td align="left">Ctrl+Shift+E</td><td align="left">Cmd+Shift+E</td></tr><tr><td align="left">更改文件选项卡</td><td align="left">Ctrl+PageUP</td><td align="left">Ctrl+Tab</td></tr><tr><td align="left">快速打开文件</td><td align="left">Ctrl+P</td><td align="left">Cmd+P</td></tr><tr><td align="left">从资源管理器打开文件</td><td align="left">Ctrl+O</td><td align="left">Cmd+O</td></tr><tr><td align="left">创建新文件</td><td align="left">Ctrl+N</td><td align="left">Cmd+N</td></tr><tr><td align="left">保存文件</td><td align="left">Ctrl+S</td><td align="left">Cmd+S</td></tr><tr><td align="left">另存为</td><td align="left">Ctrl+Shift+S</td><td align="left">Cmd+Shift+S</td></tr><tr><td align="left">关闭文件</td><td align="left">Ctrl+W</td><td align="left">Cmd+W</td></tr><tr><td align="left">关闭所有文件</td><td align="left">Ctrl+K W</td><td align="left">Cmd+K W</td></tr><tr><td align="left">删除文件（要聚焦到sidebar）</td><td align="left">Delete</td><td align="left">Delete</td></tr><tr><td align="left">重新打开文件</td><td align="left">Ctrl+Shift+T</td><td align="left">Cmd+Shift+T</td></tr><tr><td align="left">缩放</td><td align="left">Ctrl++ Ctrl+-</td><td align="left">Cmd++ Cmd+-</td></tr><tr><td align="left">拆分编辑器</td><td align="left">Ctrl+\</td><td align="left">Cmd+\</td></tr><tr><td align="left">切换分组 n为数字代表第几个分组</td><td align="left">ctrl+n</td><td align="left">Cmd+n</td></tr></tbody></table><h2 id="Code-Editing"><a href="#Code-Editing" class="headerlink" title="Code Editing"></a>Code Editing</h2><table><thead><tr><th align="left">快捷键说明</th><th align="left">Window</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">光标跳到顶部、底部</td><td align="left">Ctrl+Home、Ctrl+End</td><td align="left">Cmd+Home、Cmd+End</td></tr><tr><td align="left">光标跳到行首、行尾</td><td align="left">Home、End</td><td align="left">Home、End</td></tr><tr><td align="left">以单词为单位进行移动</td><td align="left">Ctrl+Right、Ctrl+Left</td><td align="left">Cmd+Right、Cmd+Left</td></tr><tr><td align="left">滚动条上下移动</td><td align="left">Ctrl+Up、Ctrl+Down</td><td align="left">Cmd+Up、Cmd+Down</td></tr><tr><td align="left">剪切、复制、黏贴</td><td align="left">Ctrl+X、Ctrl+C、Ctrl+V</td><td align="left">Cmd+X、Cmd+C、Cmd+V</td></tr><tr><td align="left">把一行向上、向下移动</td><td align="left">Alt+Up、Alt+Down</td><td align="left">Cmd+Up、Cmd+Down</td></tr><tr><td align="left">把一行向上、向下复制</td><td align="left">Shift+Alt+Up、Shift+Alt+Down</td><td align="left">Shift+Option+UP、Shift+Option+Donw</td></tr><tr><td align="left">去掉一行</td><td align="left">Ctrl+Shift+K</td><td align="left">Cmd+Shift+K</td></tr><tr><td align="left">向下、向上插入一行</td><td align="left">Ctrl+Enter、Ctrl+Shift+Enter</td><td align="left">Cmd+Enter、Cmd+Shift+Enter</td></tr><tr><td align="left">匹配括号</td><td align="left">Ctrl+Shift+\</td><td align="left">Cmd+Shift+\</td></tr><tr><td align="left">添加行注释</td><td align="left">Ctrl+/</td><td align="left">Cmd+/</td></tr><tr><td align="left">添加块注释</td><td align="left">Shift+Alt+A</td><td align="left">Shift+Option+A</td></tr><tr><td align="left">突出显示代码</td><td align="left">Shift+Any Direction</td><td align="left">Shift+Any Direction</td></tr><tr><td align="left">选择下一个匹配项</td><td align="left">Ctrl+D</td><td align="left">Cmd+D</td></tr><tr><td align="left">选择所有匹配项</td><td align="left">Ctrl+Shift+L</td><td align="left">Cmd+Shift+L</td></tr><tr><td align="left">取消选择匹配项</td><td align="left">Ctrl+U</td><td align="left">Cmd+U</td></tr><tr><td align="left">添加光标</td><td align="left">Alt+Click</td><td align="left">Option+Click</td></tr><tr><td align="left">跳到实体（函数，变量等）</td><td align="left">Ctrl+Shift+O</td><td align="left">Cmd+Shift+O</td></tr><tr><td align="left">漂亮格式</td><td align="left">Ctrl+Alt+F</td><td align="left">Cmd+Alt+F</td></tr><tr><td align="left">跳转到声明位置</td><td align="left">F2</td><td align="left"></td></tr><tr><td align="left">跳转到某一行</td><td align="left">Ctrl+G</td><td align="left"></td></tr><tr><td align="left">Markdown预览窗口</td><td align="left">Ctrl+Shift+V</td><td align="left">cmd+shift+V</td></tr><tr><td align="left">分屏显示Markdown预览窗口</td><td align="left">Ctrl+K V</td><td align="left">cmd+K V</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js试题</title>
      <link href="/blog/2019/09/18/js/js-exam/"/>
      <url>/blog/2019/09/18/js/js-exam/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>console.profile()</code> 在火狐浏览器中安装 <code>FireBug</code> 可以更精确的获取到程序每一个步骤所消耗的时间</p><p><code>console.time()</code> 也可以测试一段程序执行的时间，使用的比较多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'A'</span>)</span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'A'</span>)</span><br></pre></td></tr></table></figure><h2 id="call-和-apply-的区别"><a href="#call-和-apply-的区别" class="headerlink" title="call 和 apply 的区别"></a>call 和 apply 的区别</h2><p><code>fn.call(obj, 1, 2, 3)</code><br><code>fn.apply(obj, [1, 2, 3])</code></p><ol><li><code>call</code>，<code>apply</code> 都是 <code>function</code> 原型链上的函数，都可改变该函数内的 <code>this</code> 指针的指向</li><li>传参的形式不同，<code>call</code> 是一个一个来传，而 <code>apply</code> 是以数组的形式来传</li><li><code>call</code> 在性能上比 <code>apply</code> 好，特别是参数 大于 3 的情况下</li><li>它们与 <code>bind</code> 的区别是，<code>bind</code> 只改变 <code>this</code> 指针的指向，而不立刻执行<a id="more"></a></li></ol><h2 id="实现-5-add-3-minus-2"><a href="#实现-5-add-3-minus-2" class="headerlink" title="实现 (5).add(3).minus(2)"></a>实现 (5).add(3).minus(2)</h2><ul><li>把 <code>add()</code> 和 <code>minus()</code> 函数挂载到 Number 的原型链上</li><li>同时，每个方法执行完，都要返回 Number 这个类的实例，这样才可以链式调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = <span class="built_in">Number</span>(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isNaN</span>(n) ? <span class="number">0</span> : n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = check(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> + n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n = check(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> - n</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Number</span>.prototype.add = add</span><br><span class="line">    <span class="built_in">Number</span>.prototype.minus = minus</span><br><span class="line">    <span class="comment">// 懒人写法</span></span><br><span class="line">    <span class="comment">// ["add", "minus"].forEach(item =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     Number.prototype[item] = eval(item)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数-与-普通函数的区别？"><a href="#箭头函数-与-普通函数的区别？" class="headerlink" title="箭头函数 与 普通函数的区别？"></a>箭头函数 与 普通函数的区别？</h2><ol><li>语法上，箭头函数比普通函数更加简洁</li><li>箭头函数没有自己的 <code>this</code>，它里面出现的 <code>this</code> 继承函数所处上下文的 <code>this</code> （使用 <code>call/apply</code> 方式都无法改变 <code>this</code> 的指向）</li><li>箭头函数中没有 <code>arguments</code> (类数组), 只能基于 …arg 获取传递参数集合（数组）</li><li>箭头函数不能被 new 执行，（因为：箭头函数没有 this 也没有 prototype）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// THIS: WINDOW</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// THIS: BODY</span></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// THIS: WINDOW 回调函数的 THIS 一般都是 WINDOW</span></span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//  THIS: BODY</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数：把一个函数作为实参传递给另一个函数</span></span><br></pre></td></tr></table></figure><h2 id="如何把一个字符串中的大小写取反？"><a href="#如何把一个字符串中的大小写取反？" class="headerlink" title="如何把一个字符串中的大小写取反？"></a>如何把一个字符串中的大小写取反？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"My GOODword"</span></span><br><span class="line">str = str.replace(<span class="regexp">/[a-zA-Z]/g</span>, content =&gt; &#123;</span><br><span class="line">    <span class="comment">// 两种方法</span></span><br><span class="line">    <span class="comment">// 1. content.toUpperCase() === content</span></span><br><span class="line">    <span class="comment">// 2. content.cahrCodeAt() &gt;= 65 &amp;&amp; content.charCodeAt() &lt;= 90&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content.toUpperCase() === content ? content.toLowerCase() : content.toUpperCase()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现一个字符串匹配算法，类似于-indexOf"><a href="#实现一个字符串匹配算法，类似于-indexOf" class="headerlink" title="实现一个字符串匹配算法，类似于 indexOf"></a>实现一个字符串匹配算法，类似于 indexOf</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> lenT = T.length,</span><br><span class="line">            lenS = <span class="keyword">this</span>.length,</span><br><span class="line">            res = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> (lenT &gt; lenS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= lenS - lenT; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> char = <span class="keyword">this</span>[i]</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.substr(i, lenT) === T) &#123;</span><br><span class="line">                res = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(T), </span><br><span class="line">            res = reg.exec(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> res === <span class="literal">null</span> ? <span class="number">-1</span> : res.index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>.prototype.myIndexOf = myIndexOf</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> S = <span class="string">"sdlfldping"</span>,</span><br><span class="line">    T = <span class="string">"pin"</span></span><br><span class="line"><span class="built_in">console</span>.log(S.myIndexOf(T))</span><br></pre></td></tr></table></figure><h2 id="输出下面代码运行结果"><a href="#输出下面代码运行结果" class="headerlink" title="输出下面代码运行结果"></a>输出下面代码运行结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="string">'123'</span>, c = <span class="number">123</span></span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; c 因为: a["123"] &lt;=&gt; a[123]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="built_in">Symbol</span>(<span class="string">'123'</span>), c = <span class="built_in">Symbol</span>(<span class="string">'123'</span>)</span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; b ，Symbol是 ES6 中新增的数据类型，它创建出来的值是唯一值，Symbol('123') === Symbol('123') 为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 3</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = &#123;<span class="attr">key</span>: <span class="string">'123'</span>&#125;, c = &#123;<span class="attr">key</span>: <span class="string">'456'</span>&#125;</span><br><span class="line">a[b] = <span class="string">'b'</span></span><br><span class="line">a[c] = <span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">//=&gt; c</span></span><br><span class="line"><span class="comment">// 1. 对象的属性名不能是一个对象（遇到对象属性名，会默认转换为字符串）</span></span><br><span class="line"><span class="comment">// obj=&#123;&#125; arr=[12,23] obj[arr]='hello' obj=&gt;&#123;'12,23':'hello'&#125;</span></span><br><span class="line"><span class="comment">// 2. 普通对象.toString() 调取的是 Object.prototype 上的方法（这个方法是用来检测数据类型的）</span></span><br><span class="line"><span class="comment">// obj=&#123;&#125; obj.toString()=&gt;"[object Object]"</span></span><br></pre></td></tr></table></figure><h2 id="验证是否符合-URL-网址格式"><a href="#验证是否符合-URL-网址格式" class="headerlink" title="验证是否符合 URL 网址格式"></a>验证是否符合 URL 网址格式</h2><ol><li>协议：http/https/ftp</li><li>域名：<a href="http://www.xxx.xx、xxx.xx、kbs.sports.qq.com.cn" target="_blank" rel="noopener">www.xxx.xx、xxx.xx、kbs.sports.qq.com.cn</a></li><li>请求路径:<br>/<br>/index.html<br>/stu/index.html<br>/stu/</li><li>问号传参：?xx=xx&amp;xx=xx</li><li>哈希值：#xx</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"http://www.baidu.com/index.html?lx=1&amp;from=we#vieo"</span>  </span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(?:(http|https|ftp):\/\/)?((?:[\w-]+\.)+[a-z0-9]+)((?:\/[^/?#]*)+)?(\?[^#]+)?(#.+)?$/i</span> <span class="comment">// ?: 只匹配不捕获</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str))</span><br></pre></td></tr></table></figure><h2 id="对象问题"><a href="#对象问题" class="headerlink" title="对象问题"></a>对象问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把Foo当作类，在原型上设置实例公有的属性 =&gt; 实例.a()</span></span><br><span class="line">Foo.prototype.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把Foo当作普通对象设置私有的属性方法 =&gt; Foo.a()</span></span><br><span class="line">Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line">Foo.a() <span class="comment">//=&gt;4</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo() <span class="comment">// Foo.a:f=&gt;1 obj.a:f=&gt;2</span></span><br><span class="line">obj.a() <span class="comment">//=&gt;2</span></span><br><span class="line">Foo.a() <span class="comment">//=&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="编写代码实现图片的懒加载"><a href="#编写代码实现图片的懒加载" class="headerlink" title="编写代码实现图片的懒加载"></a>编写代码实现图片的懒加载</h2><ul><li>前端性能优化的重要方案，<ul><li>通过图片或者数据的延迟加载，可以加快页面渲染速度，让第一次打开页面的速度变快</li><li>只有滑动到某个区域，我们才加载真实的图片，这样也可以节省加载的流量</li></ul></li><li>处理方案<ul><li>把所有需要延迟加载的图片用一个盒子包起来，设置宽高和默认占位符</li><li>开始让所有的 IMG 的 SRC 为空，把真实图片的地址放到 IMG 的自定义属性上，让 IMG 隐藏</li><li>等到所有其它资源都加载完成后，再开始加载图片</li><li>对于很多图片，需要当页面滚动的时候，当前图片区域完全显示出来后再加载真实图片</li><li>…</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片的延迟加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            width: 800px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.imgBox</span> &#123;</span></span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">            height: 450px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#bbb</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.imgBox</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">data-img</span>=<span class="string">"./img/wallhaven-367257.jpg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/delayimgs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $container = $(<span class="string">'.container'</span>),</span><br><span class="line">    $imgBoxs = <span class="literal">null</span>,</span><br><span class="line">    $<span class="built_in">window</span> = $(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建长度为 20 的数组，每一项用 null 填充</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">``</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">null</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="comment">// fill() 是 es6的语法</span></span><br><span class="line">    str += <span class="string">`&lt;div class="imgBox"&gt;</span></span><br><span class="line"><span class="string">            &lt;img src="" alt="" data-img="./img/wallhaven-367257.jpg"&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$container.html(str)</span><br><span class="line">$imgBoxs = $container.children(<span class="string">'.imgBox'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多张图片延迟加载</span></span><br><span class="line">$<span class="built_in">window</span>.on(<span class="string">'load scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取浏览器底边框距离body的距离</span></span><br><span class="line">    <span class="keyword">let</span> $B = $<span class="built_in">window</span>.outerHeight() + $<span class="built_in">window</span>.scrollTop()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环每一个图片区域，根据自己区域距离body的距离，计算处理里面的图片是否加载</span></span><br><span class="line">    $imgBoxs.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> $item = $(item),</span><br><span class="line">            $itemA = $item.outerHeight() + $item.offset().top, </span><br><span class="line">            isLoad = $item.attr(<span class="string">'isLoad'</span>)</span><br><span class="line">        <span class="keyword">if</span> ($itemA &lt;= $B &amp;&amp; isLoad !== <span class="string">'true'</span>) &#123;</span><br><span class="line">            $item.attr(<span class="string">'isLoad'</span>, <span class="literal">true</span>) </span><br><span class="line">            <span class="keyword">let</span> $img = $item.children(<span class="string">'img'</span>)</span><br><span class="line">            <span class="comment">// 加载当前区域中的图片</span></span><br><span class="line">            $img.attr(<span class="string">'src'</span>, $img.attr(<span class="string">'data-img'</span>))</span><br><span class="line">            $img.on(<span class="string">'load'</span>, () =&gt; $img.stop().fadeIn())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="正则：一个6-16位的字符串，必须同时包含有大小写字母和数字"><a href="#正则：一个6-16位的字符串，必须同时包含有大小写字母和数字" class="headerlink" title="正则：一个6-16位的字符串，必须同时包含有大小写字母和数字"></a>正则：一个6-16位的字符串，必须同时包含有大小写字母和数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个6-16位的字符串，必须同时包含有大小写字母和数字</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[a-z0-9]+$)(?!^[A-Z0-9]+$)(?!^[0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个1-10为以数字字母下划线组成的字符串，必须包含下划线</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/(?=.*_.*)^\w&#123;1,10&#125;$/</span></span><br></pre></td></tr></table></figure><h2 id="正向预查和负向预查"><a href="#正向预查和负向预查" class="headerlink" title="正向预查和负向预查"></a>正向预查和负向预查</h2><h3 id="正向预查-pattern"><a href="#正向预查-pattern" class="headerlink" title="正向预查 (?=pattern)"></a>正向预查 (?=pattern)</h3><p>所谓正向预查，就是要匹配的字符串，必须满足pattern这个条件，我们知道正则表达式/cainiao/会匹配cainiao。同样也会匹配cainiao9中的cainiao。但是我们可能希望，cainiao只能匹配cainiao8中的cainiao。这个时候就可以这样小写：<code>/cainiao(?=8)/</code>，看两个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?=8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao9'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?=8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao8'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; cainiao</span></span><br><span class="line"><span class="comment">// 注意：括号里的内容只是条件，并不参与真正的捕获，只是检查后面的字符是否符合要求而已</span></span><br></pre></td></tr></table></figure><h3 id="负向预查-pattern"><a href="#负向预查-pattern" class="headerlink" title="负向预查 (?!pattern)"></a>负向预查 (?!pattern)</h3><p>和(?=pattern)相反，做匹配时，必须不满足pattern这个条件，还拿上面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?!8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao8'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; null，后面不能紧跟8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/cainiao(?!8)/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'cainiao9'</span></span><br><span class="line">alert(reg.exec(str)) <span class="comment">//=&gt; cainiao</span></span><br></pre></td></tr></table></figure><p>下面的两个表达式，表示的是一个意思<br><code>var reg1 = /(?=^)\d{2}(?=$)/</code><br><code>var reg2 = /^\d{2}$/</code></p><h2 id="attr-prop-val-属性选择器"><a href="#attr-prop-val-属性选择器" class="headerlink" title="$attr(prop,val) 属性选择器"></a>$attr(prop,val) 属性选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中所有class为box的元素</span></span><br><span class="line"><span class="keyword">let</span> arr = $attr(<span class="string">'class'</span>, <span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$attr</span>(<span class="params">prop, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前页面中所有的标签 </span></span><br><span class="line">    <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>),</span><br><span class="line">        arr = []</span><br><span class="line">    <span class="comment">// [].forEach.call(elements, item =&gt; &#123;&#125;)</span></span><br><span class="line">    elements = <span class="built_in">Array</span>.from(elements) <span class="comment">// 把非数组转换为数组</span></span><br><span class="line">    elements.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 存储的是当前元素prop对应的属性值</span></span><br><span class="line">        <span class="keyword">let</span> itemValue = item.getAttribute(prop)</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">'class'</span>) &#123; <span class="comment">// 属性为class的进行特殊处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + val + <span class="string">"\\b"</span>).test(itemValue) ? arr.push(item) : <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (itemValue === val) &#123;</span><br><span class="line">            arr.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'no做no带'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/ig</span></span><br><span class="line">str = str.replace(reg, value =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>+ value +<span class="string">" "</span></span><br><span class="line">&#125;).trim()</span><br></pre></td></tr></table></figure><h2 id="编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组"><a href="#编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组" class="headerlink" title="编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">编写一个程序，将数组扁平化，并去除其中重复部分数据，并得到一个升序且不重复的数组</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1: Array.prototype.flat 展开</span></span><br><span class="line"><span class="comment">// [...new Set(arr)] new Set()去重</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr.flat(<span class="literal">Infinity</span>))).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2： 数组不管多少级，toString之后都会变成以逗号分隔的字符串</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：JSON.stringify 也可以扁平化数组</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">''</span>).split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：基于数组的some方法进行检测</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr]</span><br><span class="line"><span class="keyword">while</span> (arr4.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr4 = [].concat(...arr4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法5：递归处理</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFlat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = [],</span><br><span class="line">            _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> fn = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> item = arr[i]</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">                    fn(item)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fn(_this)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.myFlat = myFlat</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">let</span> arr5 = arr.myFlat()</span><br></pre></td></tr></table></figure><h2 id="实现一个-new方法，模拟内置new"><a href="#实现一个-new方法，模拟内置new" class="headerlink" title="实现一个_new方法，模拟内置new"></a>实现一个_new方法，模拟内置new</h2><p>分析<br><code>let dah = new Dog(&#39;大黄&#39;)</code></p><ol><li>像普通函数执行一样，形成一个私有的作用域<ul><li>形参赋值</li><li>变量提升</li></ul></li><li>默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前类的一个实例</li><li>代码执行</li><li>默认把创建的对象返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bark ...........'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fn --- 当前要 new 的类</span></span><br><span class="line"><span class="comment">// ...arg 后期给构造函数传递参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">Fn, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let obj = &#123;&#125;</span></span><br><span class="line">    <span class="comment">// obj.__proto__ = Fn.prototype</span></span><br><span class="line">    <span class="comment">// 上面两句可以这样写</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(Fn.prototype)</span><br><span class="line">    Fn.call(obj, ...arg)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dah = _new(Dog, <span class="string">'大黄'</span>)</span><br></pre></td></tr></table></figure><h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>]</span><br><span class="line"><span class="comment">//=&gt; 合并后的数组为：['A1', 'A2', 'A', 'B1' 'B2', 'B', 'C1', 'C2', 'C', 'D1', 'D2']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：若arr1是升序数组</span></span><br><span class="line"> <span class="keyword">let</span> mixArr1 = arr2.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">'zz'</span>).concat(arr1).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).map(<span class="function"><span class="params">item</span> =&gt;</span> item.replace(<span class="string">'zz'</span>, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：若arr1是无序的 </span></span><br><span class="line">arr1 = [<span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>]</span><br><span class="line"><span class="keyword">let</span> mixArr2 = [...arr1]</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item2 = arr2[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; mixArr2.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item1 = mixArr2[j]</span><br><span class="line">        <span class="keyword">if</span> (item1.includes(item2)) &#123;</span><br><span class="line">            n = j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mixArr2.splice(n + <span class="number">1</span>, <span class="number">0</span>, item2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器是异步编程：每一轮循环设置定时器，无需等定时器触发执行，继续下一轮循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>) <span class="comment">//=&gt; 输出10次10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让其一秒后输出连续的 0~9 可有以下几种方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：let 存在块级作用域，每一次循环都会在当前作用域中形成一个私有变量i存储0~9</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：使用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    ~ <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>) </span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：闭包2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function">(<span class="params">i =&gt; (</span>) =&gt;</span> <span class="built_in">console</span>.log(i))(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4：基于 bind 的预先处理机制，在循环的时候把每次执行函数需要输出的结果，预先传递给函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(fn.bind(<span class="literal">null</span>, i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><ol><li>本应匿名的函数如果设置了函数名，在外面还是无法调用，但是在函数里面是可以使用的</li><li>而且类似于创建常量一样，这个名字存储的值不能再被修改（非严格模式下不报错，但是不会有任何效果，严格模式下会报错）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">AAA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//"use strict"</span></span><br><span class="line">    <span class="comment">//AAA = 1000 //=&gt; Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">    <span class="built_in">console</span>.log(AAA) <span class="comment">//=&gt; 当前函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AAA() //=&gt; Uncaught ReferenceError: AAA is not defined</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>看一下以下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line">!(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">20</span> </span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">//=&gt; 输出b函数</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//=&gt; 10</span></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>== 进行比较时，如果左右两边数据类型不一样，则先转换为相同的数据类型，然后再进行比较</p><ol><li>{} == {} 两个对象进行比较，比较的是堆内存的地址</li><li>null == undefined 相等，null === undefined 不相等</li><li>NaN == NaN 不相等 NaN和谁都不相等</li><li>[12] == ‘12’ 对象和字符串相比，是把对象toString()转换为字符串后再进行比较</li><li>剩余所有情况在进行比较时，都是转换为数字（前提数据类型不一样）<br>对象转数字：先转换为字符串，然后再转换为数字<br>字符串转数字：只要出现一个非数字字符，结果就是 NaN<br>布尔转数字：true-&gt;1 false-&gt;0<br>null转数字为0<br>undefined转数字为NaN<br>[12] == true =&gt; Number([12].toString()) == 1 false<br>[] == false =&gt; 0 == 0 true<br>[] == 1 =&gt; 0 == 1 false<br>true == 2 =&gt; 1 == 2 false</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ? <span class="comment">// 当a等于什么时，符合下面表达式</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：</span></span><br><span class="line"><span class="comment">// 对象和数字比较：先把对象.toString()变为字符串，然后再转换为数字</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">            n: <span class="number">0</span>,</span><br><span class="line">            toString()&#123;</span><br><span class="line">                <span class="keyword">return</span> ++<span class="keyword">this</span>.n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// a.toString(); 此时调取的就不再是Object.prototype.toString了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.toString = a.shift</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'a'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value ? ++<span class="keyword">this</span>.value : <span class="keyword">this</span>.value = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="理解Array-prototype-push"><a href="#理解Array-prototype-push" class="headerlink" title="理解Array.prototype.push"></a>理解Array.prototype.push</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">    length: <span class="number">2</span>,</span><br><span class="line">    push: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="number">1</span>)</span><br><span class="line">obj.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[<span class="keyword">this</span>.length] = val</span><br><span class="line">    <span class="comment">//=&gt; this.length 在原来的基础上加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="number">1</span>) <span class="comment">//=&gt; obj[length]=1 //=&gt; obj[2]=1</span></span><br><span class="line">obj.push(<span class="number">2</span>) <span class="comment">//=&gt; obj[length]=2 //=&gt; obj[3]=2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//=&gt; &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 三大经典排序  </span></span><br><span class="line"><span class="string">### 冒泡排序：  </span></span><br><span class="line"><span class="string">让数组中的当前项和后一项进行比较，如果当前项比后一项大，则两项交换位置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length <span class="number">-1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - j; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换位置</span></span><br><span class="line">                <span class="comment">// let temp = arr[i]</span></span><br><span class="line">                <span class="comment">// arr[i] = arr[i + 1]</span></span><br><span class="line">                <span class="comment">// arr[i + 1] = temp</span></span><br><span class="line">                [arr[i], arr[i+<span class="number">1</span>]] = [arr[i+<span class="number">1</span>], arr[i]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubble(arr))</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [arr[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; arr.length <span class="number">-1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = newArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; newArr[i]) &#123;</span><br><span class="line">                newArr.splice(i+<span class="number">1</span>, <span class="number">0</span>, arr[j])</span><br><span class="line">                <span class="keyword">break</span>   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">                newArr.unshift(arr[j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line">cosole.log(insert(arr))</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span></span></span><br><span class="line"><span class="function">    // 不会造成栈溢出</span></span><br><span class="line"><span class="function">    <span class="title">setTimeout</span>(<span class="params">fn, <span class="number">0</span></span>) </span></span><br><span class="line"><span class="function">    // <span class="title">js</span> 运行是基于单线程的， 如果时间设为0，代表立即插入队列，但不是立即执行，仍然要等待前面代码执行完毕</span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">[...arr]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middleIndex = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>),</span><br><span class="line">        middleValue = arr.splice(middleIndex, <span class="number">1</span>)[<span class="number">0</span>],</span><br><span class="line">        leftArr = [],</span><br><span class="line">        rightArr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = arr[i]</span><br><span class="line">        item &lt; middleValue ? leftArr.push(item) : rightArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quick(leftArr).concat(middleValue, quick(rightArr))   </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quick(arr))</span><br></pre></td></tr></table></figure><h2 id="完成如下需求"><a href="#完成如下需求" class="headerlink" title="完成如下需求"></a>完成如下需求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">某公司1到12月份的销售额存在一个对象里面  </span><br><span class="line">如下：&#123;</span><br><span class="line">    1: 222,</span><br><span class="line">    2: 123,</span><br><span class="line">    5: 777</span><br><span class="line">&#125;,</span><br><span class="line">请把数据处理为如下结构：[222, 123, null, null, 777, null, null, null, null, null, null, null]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="number">222</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">777</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sale</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">        obj[i] ? arr.push(obj[i]) : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="literal">null</span>).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> obj[index + <span class="number">1</span>] || <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 </span></span><br><span class="line">obj.length = <span class="number">13</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(obj).slice(<span class="number">1</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> item === <span class="string">"undefinded"</span> ? <span class="literal">null</span> : item</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="literal">null</span>)</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    arr[item - <span class="number">1</span>] = obj[item]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="给定两个数组，写一个方法来计算它们的交集"><a href="#给定两个数组，写一个方法来计算它们的交集" class="headerlink" title="给定两个数组，写一个方法来计算它们的交集"></a>给定两个数组，写一个方法来计算它们的交集</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> s2 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">[...s1], [...s2]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mix = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = s1.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = s2.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] === s2[j]) &#123;</span><br><span class="line">                mix.push(s1[i])</span><br><span class="line">                s1.splice(i, <span class="number">1</span>)</span><br><span class="line">                s2.splice(j, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mix</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(intersection(s1, s2))</span><br></pre></td></tr></table></figure><h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数<br>输入：[1, 2, 3, 4, 5] 和 k = 3<br>输出：[3, 4, 5, 1, 2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || k === <span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="keyword">this</span>.length) k = k % <span class="keyword">this</span>.length</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.slice(-k).concat(<span class="keyword">this</span>.slice(<span class="number">0</span>, <span class="keyword">this</span>.length - k))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法2</span></span><br><span class="line">    <span class="comment">// return [...this.splice(this.length-k), ...this] </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法3</span></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; k; i++) &#123;</span></span><br><span class="line">    <span class="comment">//     this.unshift(this.pop())</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法4</span></span><br><span class="line">    <span class="comment">// new Array(k).fill('').forEach(() =&gt; this.unshift(this.pop()))</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.rotate = rotate</span><br><span class="line"><span class="built_in">console</span>.log(arr.rotate(<span class="number">3</span>)) <span class="comment">//=&gt; [ 3, 4, 5, 1, 2 ]</span></span><br></pre></td></tr></table></figure><h2 id="请实现一个-add-函数，满足以下功能"><a href="#请实现一个-add-函数，满足以下功能" class="headerlink" title="请实现一个 add 函数，满足以下功能"></a>请实现一个 add 函数，满足以下功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(1) // 1  </span><br><span class="line">add(1)(2) // 3  </span><br><span class="line">add(1)(2)(3) // 6  </span><br><span class="line">add(1, 2)(3) // 6  </span><br><span class="line">add(1, 2, 3) // 6</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params">context = window, ...outerArg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...innerArg</span>) </span>&#123;</span><br><span class="line">            _this.call(context, ...outerArg.concat(innerArg))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myBind = myBind</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DOS 命令</title>
      <link href="/blog/2019/09/18/computer/DOS/"/>
      <url>/blog/2019/09/18/computer/DOS/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="内部命令和外部命令"><a href="#内部命令和外部命令" class="headerlink" title="内部命令和外部命令"></a>内部命令和外部命令</h2><ul><li>内部命令<ul><li>系统自带的命令，例如ping mv等</li></ul></li><li>外部命令<ul><li>放在window\system32，可自行扩展，如下载wget.exe放在该目录下可调用</li></ul></li></ul><a id="more"></a><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>查看帮助信息</p><pre><code>命令 /?</code></pre><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">设置console上面的title</td></tr><tr><td align="left">mode</td><td align="left">配置控制台参数，如控制台窗口大小</td></tr><tr><td align="left">color</td><td align="left">设置窗口颜色</td></tr><tr><td align="left">cd</td><td align="left">切换目录</td></tr><tr><td align="left">dir</td><td align="left">查看当前目录下的文件</td></tr><tr><td align="left">copy</td><td align="left">复制文件（不包括文件夹）</td></tr><tr><td align="left">xcopy</td><td align="left">复制文件（包括文件夹）</td></tr><tr><td align="left">rename</td><td align="left">（缩写 ren）重命名</td></tr><tr><td align="left">move</td><td align="left">移动文件</td></tr><tr><td align="left">replace</td><td align="left">替代文件</td></tr><tr><td align="left">type</td><td align="left">查看文件内容</td></tr><tr><td align="left">del</td><td align="left">删除文件</td></tr><tr><td align="left">rd</td><td align="left">删除文件夹</td></tr><tr><td align="left">md</td><td align="left">创建文件</td></tr></tbody></table><h2 id="set设置局部变量"><a href="#set设置局部变量" class="headerlink" title="set设置局部变量"></a>set设置局部变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre><code>set name=xxx</code></pre><h3 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h3><p>set不带参数会显示所有系统变量</p><pre><code>set name</code></pre><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><pre><code>set name=</code></pre><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><pre><code>set /a 10+4----------demon.bat文件@echo offset /a var=4*3echo %var%</code></pre><h2 id="setx设置永久变量"><a href="#setx设置永久变量" class="headerlink" title="setx设置永久变量"></a>setx设置永久变量</h2><pre><code>setx PATH &quot;%path%;文件路径&quot;需要重新打开窗口才会看到生效</code></pre><h2 id="接收用户的输入信息（-p）"><a href="#接收用户的输入信息（-p）" class="headerlink" title="接收用户的输入信息（/p）"></a>接收用户的输入信息（/p）</h2><pre><code>----------demon.bat@echo offset /p var=请输入一个数字：echo 你输入的数字是：%var%pause &gt;nul</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code>@echo offrem 我是解释文字 exit 退出命令:: 我也是解释文字，你看不见我的exit pause </code></pre><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>查看上一条命令是否执行成功</p><pre><code>echo %errorlevel%输出0为成功</code></pre><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符 |"></a>管道符 |</h2><p>将第一条命令的结果作为第二天命令的参数来执行</p><pre><code>dir C:\ | find &quot;ell&quot; netstat -ano |findstr TCP</code></pre><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><ul><li><p>&amp;</p><ul><li>当第一条命令执行失败了，后边的命令还会继续执行</li><li>输出e盘和f盘的文件：<code>dir e:/ &amp; dir f:/</code></li></ul></li><li><p>&amp;&amp;</p><ul><li>第一条命令失败时，后边的命令不会继续执行</li></ul></li><li><p>||</p><ul><li>第一条命令失败后才执行第二天命令</li></ul></li><li><p>()</p></li><li><p>;</p></li></ul><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>? – 单个字符</p><pre><code>输出文件名&lt;=3个字符的文件dir f:\???</code></pre><p>* – 所有</p><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><p>exist / not exist 存不存在<br>/i 忽略大小写<br>== 判断字符串是否相等<br>equ 判断数值是否相等<br>defined 是否定义</p><pre><code>@echo offif exist c:\test.txt (echo 存在test文件) else (type nul&gt;c:\test &amp; echo 创建成功)set var = helloif defined var (echo 已定义) else (echo 没有被定义)if /i %var%==&quot;Hello&quot; (echo 相等) else (echo 不相等)pause &gt;nul</code></pre><h2 id="数值之间的比较"><a href="#数值之间的比较" class="headerlink" title="数值之间的比较"></a>数值之间的比较</h2><table><thead><tr><th align="left">中文含义</th><th align="left">关系符</th><th align="left">英文解释</th></tr></thead><tbody><tr><td align="left">等于</td><td align="left">equ</td><td align="left">equal</td></tr><tr><td align="left">大于</td><td align="left">gtr</td><td align="left">greater than</td></tr><tr><td align="left">大于或等于</td><td align="left">geq</td><td align="left">greater than or equal</td></tr><tr><td align="left">小于</td><td align="left">lss</td><td align="left">less than</td></tr><tr><td align="left">小于或等于</td><td align="left">leq</td><td align="left">less than or equal</td></tr><tr><td align="left">不等于</td><td align="left">neq</td><td align="left">no equal</td></tr></tbody></table><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><pre><code>cmd控制台写法for %i in (1 2 3 4 5) do echo %i /d 匹配文件夹for /d %i in (*) do echo %i-----------------------------------遍历文件------demo.bat@echo offfor %%i in (c:\*.txt) do echo %%ipause &gt;nul/l 步进 步长为2for /l %%i in (1,2,10) do echo %%i打开5次百度for /l %%i in (1,1,5) do start www.baidu.com/r 层叠遍历所有子文件for /r f:\ %%i in (*.txt) do echo %%i打印出demo.txt中的内容，类似typefor /f &quot;delims=&quot; %%i in (f:\demo.txt) do echo %%iskip -- 跳过第几列tokens -- 提取第几列 for /f &quot;skip=1 tokens=1,2 delims= &quot; %%i in (f:\demo.txt) do echo %%i %%j </code></pre><h2 id="重定向操作符"><a href="#重定向操作符" class="headerlink" title="重定向操作符"></a>重定向操作符</h2><p>&gt;、&gt;&gt;</p><pre><code>会覆盖之前的结果ping www.baidu.com &gt;c:\test.txt不覆盖，追加内容ping www.baidu.com &gt;&gt;c:\test.txt</code></pre><p>&lt;</p><pre><code>读取test.txt内容并排序显示在控制台中sort &lt; test.txt</code></pre><p>句柄的数字代码描述<br>0：键盘输入<br>1：输出到命令提示窗<br>2：错误输出</p><pre><code>di &gt;right.txt 2&gt;error.txt</code></pre><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>telnet 就是查看某个端口是否可访问。</p><pre><code>telnet www.baidu.com 80</code></pre><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>-a 所有，-n以数字形式显示，-o 显示进程ID</p><pre><code>netstat -ano</code></pre><h2 id="实战：查询端口被哪个进程占用"><a href="#实战：查询端口被哪个进程占用" class="headerlink" title="实战：查询端口被哪个进程占用"></a>实战：查询端口被哪个进程占用</h2><p>涉及命令：</p><ul><li>netstat 查询tcp/ip连接命令</li><li>tasklist 列举任务进程</li><li>taskkill 杀死任务进程</li><li>taskmgr 打开任务管理器</li></ul><p>1、根据62537端口值查找PID</p><pre><code>netstat -ano |findstr 62537</code></pre><p>2、根据PID查看该任务列表</p><pre><code>tasklist |findstr 5772</code></pre><p>3、杀死该任务<br>taskkill /im notepad.exe /f</p><h2 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h2><p>可用于显示当前的TCP/IP配置，一般用来检验人工配置的TCP/IP设置是否正确</p><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ipconfig /all</td><td align="left">显示本地计算机所有网络连接情况，如：IP地址，子网掩码，DNS配置，DHCP配置等</td></tr><tr><td align="left">ipconfig /release</td><td align="left">释放ip</td></tr><tr><td align="left">ipconfig /renew</td><td align="left">重新获取ip</td></tr><tr><td align="left">ipconfig /flushdns</td><td align="left">刷新DNS</td></tr></tbody></table><h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><h3 id="net-user"><a href="#net-user" class="headerlink" title="net user"></a>net user</h3><p>打开user管理图形界面</p><pre><code>lusrmgr.msc</code></pre><p>查看用户账号</p><pre><code>net user</code></pre><p>创建用户账号</p><pre><code>net user newuser /add</code></pre><p>禁用用户</p><pre><code>net user newuser /active:no</code></pre><p>重新启用</p><pre><code>net user newuser /active:yes</code></pre><p>加入管理员组</p><pre><code>net localgroup administrators newuser /add</code></pre><p>查看是否加入成功</p><pre><code>net user newuser</code></pre><p>从组中移除</p><pre><code>net localgroup administrators newuser /del</code></pre><p>删除账号</p><pre><code>net user newuser /del</code></pre><h3 id="net-share"><a href="#net-share" class="headerlink" title="net share"></a>net share</h3><p>图形界面：<code>compmgmt</code></p><ul><li>net share 查看共享</li><li>net share f=F:/ 共享F盘</li><li>net share f /del 取消共享</li><li>net view \\主机名 查看特定主机共享</li><li>net share disk$=e: 隐藏共享</li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p><code>services.msc</code></p><p>停止xxx服务</p><pre><code>net stop xxx</code></pre><p>开启xxx服务</p><pre><code>net start xxx</code></pre><h2 id="netsh"><a href="#netsh" class="headerlink" title="netsh"></a>netsh</h2><p>netsh(Network Shell)，网络配置命令行工具，可用来修改windows的ip、网关、dns等信息</p><h3 id="netsh-基本命令"><a href="#netsh-基本命令" class="headerlink" title="netsh 基本命令"></a>netsh 基本命令</h3><p>用法：</p><ol><li>netsh</li><li>int ip</li><li>dump</li></ol><p>备份网络配置</p><pre><code>netsh dump &gt; 路径</code></pre><p>设置静态IP</p><pre><code>set address name=&quot;本地连接&quot; source=static addr=192.168.0.7 mask=255.255.255.0</code></pre><p>设置自动获取IP</p><pre><code>set address name=&quot;本地连接&quot; source=dhcp</code></pre><p>设置其他（网关, DNS等）</p><pre><code>set address name=&quot;本地连接&quot; gateway=127.19.96.1 gwmetric=1</code></pre><h3 id="netsh修复网络故障"><a href="#netsh修复网络故障" class="headerlink" title="netsh修复网络故障"></a>netsh修复网络故障</h3><p><code>netsh winsock reset</code></p><pre><code>作用是重置Winsock目录。如果计算机Winsock配置有问题的话将会导致网络连接等问题，通过重置Winsock目录借以修复网络，可以重新初始化网络环境，以解决由于软件冲突、病毒原因造成的参数错误问题。</code></pre><p><code>netsh int ip reset c:\resetlog.txt</code></p><pre><code>作用是重置TCP/IP协议，相对于卸载并重新安装TCP/IP协议，使其恢复到初始安装操作系统时的状态。</code></pre><h3 id="netsh设置防火墙"><a href="#netsh设置防火墙" class="headerlink" title="netsh设置防火墙"></a>netsh设置防火墙</h3><p>图形界面： <code>firewall.cpl</code></p><p>关闭防火墙</p><pre><code>netsh firewall set opmode mode=disable</code></pre><p>开启防火墙</p><pre><code>netsh firewall set opmode mode=enable</code></pre><h3 id="netsh获取已连接过的wifi密码"><a href="#netsh获取已连接过的wifi密码" class="headerlink" title="netsh获取已连接过的wifi密码"></a>netsh获取已连接过的wifi密码</h3><p>查看当前系统已保存的网络</p><pre><code>netsh wlan show profiles</code></pre><p>查看指定wifi的密码</p><pre><code>netsh wlan show profile name=&quot;ssid&quot; key=clear</code></pre><p>搭建无线网络</p><pre><code>netsh wlan set hostednetwork mode=allow ssid=wname key=123456netsh wlan start hosted</code></pre><h2 id="shutdown关机设置"><a href="#shutdown关机设置" class="headerlink" title="shutdown关机设置"></a>shutdown关机设置</h2><p>设置120秒后重启</p><pre><code>shutdown /r -t 120</code></pre><p>取消上一条命令</p><pre><code>shutdown /a</code></pre><h2 id="attrib设置文件属性"><a href="#attrib设置文件属性" class="headerlink" title="attrib设置文件属性"></a>attrib设置文件属性</h2><p>查看文件的属性</p><pre><code>attrib demo.txt</code></pre><p>添加只读属性 (h隐藏属性 -删除)</p><pre><code>attrib +r +h demo.txt</code></pre><h2 id="goto-跳转命令"><a href="#goto-跳转命令" class="headerlink" title="goto 跳转命令"></a>goto 跳转命令</h2><pre><code>@echo offgoto part1:part1echo hellopause</code></pre><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>可以在命令行下打开盘符、目录、文件、网址等<br>start /max C:\ ————– 最大化打开C盘<br>start /min</p><p>打开带有空格的文件夹 “aa bb”</p><pre><code>start &quot;&quot; &quot;aa bb&quot;</code></pre><h2 id="call-程序互相调用"><a href="#call-程序互相调用" class="headerlink" title="call 程序互相调用"></a>call 程序互相调用</h2><pre><code>@echo offcall demo.batpause</code></pre><h2 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h2><p>从第三个字母进行排序</p><pre><code>sort /+3 demol.txt</code></pre><p>倒序之后保存在1.txt</p><pre><code>sort /r demol.txt &gt; 1.txt或者sort /r demol.txt /o 1.txt</code></pre><h2 id="判断网络故障"><a href="#判断网络故障" class="headerlink" title="判断网络故障"></a>判断网络故障</h2><blockquote><p>原因：TCP/IP协议出错、TCP/IP配置出错、物理故障、中毒等</p></blockquote><p>检查本地TCP/IP协议是否安装正常</p><pre><code>ping 127.0.0.1 (localhost)</code></pre><p>检查网关连接是否畅通</p><pre><code>ping 192.168.1.1</code></pre><p>检查电脑与外部网络连接是否畅通</p><pre><code>ping www.baidu.com</code></pre><h2 id="修复系统-系统文件缺失"><a href="#修复系统-系统文件缺失" class="headerlink" title="修复系统 (系统文件缺失)"></a>修复系统 (系统文件缺失)</h2><p><code>sfc /scannow</code> 扫描并尽可能修复保护的系统文件</p><p>系统日志：Windows/Logs/CBS/CBS.log</p><h2 id="磁盘修复"><a href="#磁盘修复" class="headerlink" title="磁盘修复"></a>磁盘修复</h2><p>图形界面：<code>compmgmt</code></p><h3 id="chkdsk-系统当掉或非法关机"><a href="#chkdsk-系统当掉或非法关机" class="headerlink" title="chkdsk (系统当掉或非法关机)"></a>chkdsk (系统当掉或非法关机)</h3><p>修复磁盘上的错误</p><pre><code>chkdsk -f</code></pre><p>查找坏扇区并恢复可读信息</p><pre><code>chkdsk /r</code></pre><h3 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h3><p>把磁盘转为NTFS</p><pre><code>convert f: /fs:ntfs</code></pre><h3 id="diskpart"><a href="#diskpart" class="headerlink" title="diskpart"></a>diskpart</h3><p><code>diskpart</code></p><p>列出有哪些盘符：<code>list disk</code><br>选择磁盘1：<code>select disk 1</code><br>查看详情：<code>detail disk</code><br>选择分区：<code>select partition1</code><br>格式化磁盘：<code>clean</code><br>创建主分区：<code>creat partition primary</code><br>定义磁盘：<code>format fs=ntfs quick label=&quot;E:&quot;</code></p><h2 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h2><p>查看系统版本：<code>winver</code><br>查看激活信息：<code>slmgr /dli || slmgr /xpr</code><br>卸载产品密钥：<code>slmgr /upk</code><br>安装产品密钥：<code>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</code><br>设置密钥管理服务器计算机名：<code>slmgr /skms zh.us.to</code><br>成功的激活产品：<code>slmgr /ato</code></p><h2 id="wget下载网路资源"><a href="#wget下载网路资源" class="headerlink" title="wget下载网路资源"></a><a href="https://www.cnblogs.com/hzdx/p/6432161.html" target="_blank" rel="noopener">wget下载网路资源</a></h2><p>下载地址：<a href="https://eternallybored.org/misc/wget/" target="_blank" rel="noopener">https://eternallybored.org/misc/wget/</a><br>wget特点</p><ul><li>支持断点下传功能</li><li>同时支持FTP和HTTP下载方式</li><li>支持代理服务器</li><li>设置方便简单</li><li>程序小，完全免费</li></ul><p>-o, –output-file=FILE 将软件输出信息保存到文件；<br>-i, –input-file=FILE 从文件中取得URL<br>-r, –recursive 下载整个网站，目录（小心使用）<br>-l, –level=NUMBER 下载层次</p><pre><code>命令如下：wget -r -p -k -np -nc -e robots=off http://www.example.com/mydir/如果要想下载整个网站，最好去除-np参数。   wget -r -p -k -nc -e robots=off http://www.example.com/mydir/-r 递归；对于HTTP主机，wget首先下载URL指定的文件，然后（如果该文件是一个HTML文档的话）递归下载该文件所引用（超级连接）的所有文件（递 归深度由参数-l指定）。对FTP主机，该参数意味着要下载URL指定的目录中的所有文件，递归方法与HTTP主机类似。   -c 指定断点续传功能。实际上，wget默认具有断点续传功能，只有当你使用别的ftp工具下载了某一文件的一部分，并希望wget接着完成此工作的时候，才 需要指定此参数。-nc 不下载已经存在的文件-np 表示不追溯至父目录，不跟随链接，只下载指定目录及子目录里的东西；-p 下载页面显示所需的所有文件。比如页面中包含了图片，但是图片并不在/yourdir目录中，而在/images目录下，有此参数，图片依然会被正常下 载。-k 修复下载文件中的绝对连接为相对连接，这样方便本地阅读。-o down.log 记录日记到down.log-e robots=off 忽略robots.txt</code></pre><h2 id="reg注册表操作"><a href="#reg注册表操作" class="headerlink" title="reg注册表操作"></a>reg注册表操作</h2><p>图形界面：<code>regedit</code></p><ul><li><code>reg query</code></li><li><code>reg add</code></li><li><code>reg delete</code></li><li><code>reg export</code></li><li><code>reg import</code></li></ul><h2 id="加速网络速度"><a href="#加速网络速度" class="headerlink" title="加速网络速度"></a>加速网络速度</h2><ul><li><code>gpedit</code></li><li><code>ipconfiig /flushdns</code></li><li><code>netsh interface tcp show global</code></li><li><code>netsh interface tcp set global autotuninglevel=normal</code></li></ul><h2 id="批量找出特定后缀名的文件名"><a href="#批量找出特定后缀名的文件名" class="headerlink" title="批量找出特定后缀名的文件名"></a>批量找出特定后缀名的文件名</h2><pre><code>for /r f:\ %i in (*.txt) do echo %i</code></pre><h2 id="清理系统垃圾"><a href="#清理系统垃圾" class="headerlink" title="清理系统垃圾"></a>清理系统垃圾</h2><pre><code>@echo offecho 请勿关闭本窗口！echo 正在清除系统垃圾文件，请稍等.....del /f /s /q %systemdrive%\*.tmpdel /f /s /q %windir%\prefetch\*.* rd /s /q %windir%\temp &amp; md %windir%\tempdel /f /s /q &quot;%userprofile%\Local Settings\Temp\*.*&quot;del /f /s /q %systemdrive%\*._mpdel /f /s /q %windir%\*.bakdel /f /s /q %systemdrive%\*.logdel /f /s /q %systemdrive%\*.giddel /f /s /q %systemdrive%\*.chkdel /f /s /q %systemdrive%\*.olddel /f /s /q %systemdrive%\recycled\*.*del /f /q %userprofile%\cookies\*.*del /f /q $userprofile%\recent\*.*del /f /s /q &quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&quot;echo 清除系统垃圾完成！pause &gt;nul</code></pre><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><p>会不断打开cmd窗口</p><pre><code>@echo offstart cmd%0</code></pre><h2 id="提升为临时管理员权限"><a href="#提升为临时管理员权限" class="headerlink" title="提升为临时管理员权限"></a>提升为临时管理员权限</h2><pre><code>runas /noprofile /user:mymachine\administrator cmdrunas /user:mymachine\Administrator /sa &quot;C:\Program Files\Internet Explorer\iexplore.exe&quot;</code></pre><h2 id="系统帐户统一管理"><a href="#系统帐户统一管理" class="headerlink" title="系统帐户统一管理"></a>系统帐户统一管理</h2><pre><code>@echo offtitle 账号管理echo:start echo 1、添加账号    2、删除账号    3、查看已有账号echo 4、关闭管理员账号    5、开启管理员账号set /p var=请输入数字：if not defined var goto startif %var%==1 goto 1if %var%==2 goto 2if %var%==3 goto 3:1set str=%random%net user user%str% /addgoto start:2set /p str=请输入要删除的账号：net user %str% /del:3net usergoto startpause &gt;nul</code></pre><h2 id="文件查询搜索"><a href="#文件查询搜索" class="headerlink" title="文件查询搜索"></a>文件查询搜索</h2><pre><code>@echo off:startset /p var=请输入你要搜索的名字:type demo.txt | findstr %var%if %var%==exit (goto end) else (goto start):endexitpause &gt;nul</code></pre><h2 id="IPC-入侵"><a href="#IPC-入侵" class="headerlink" title="IPC$ 入侵"></a>IPC$ 入侵</h2><p>IPC$ 是共享”命名管道”的资源，利用IPC$，连接者甚至可以与目标主机建立一个空的连接而无需用户名与密码（当然，对方机器必须开了IPC$共享，否则你是连接不上的），而利用这个空的连接，连接者还可以得到目标主机上的用户列表（不过负责的管理员会禁止导出用户列表的）。</p><p>建立空连接:</p><pre><code>net use \\IP\ipc$ &quot;&quot; /user:&quot;&quot;</code></pre><p>建立非空连接:</p><pre><code>net use \\IP\ipc$ &quot;用户名&quot; /user:&quot;密码&quot;</code></pre><p>映射默认共享</p><pre><code>net use z: \\IP\c$ &quot;密码&quot; /user:&quot;用户名&quot;（即可将对方饿c盘映射为自己的z盘，其他盘类推）</code></pre><p>如果已经和目标建立了ipc$，则可以直接用IP+盘符+$访问</p><pre><code>net use z: \\IP\c$</code></pre><p>删除一个ipc$连接</p><pre><code>net use \\IP\ipc$ /del</code></pre><p>删除共享映射</p><pre><code>net use c: /del </code></pre><h2 id="设置IP和DNS"><a href="#设置IP和DNS" class="headerlink" title="设置IP和DNS"></a>设置IP和DNS</h2><p>网路连接界面：<code>ncpa.cpl</code></p><h3 id="静态获取"><a href="#静态获取" class="headerlink" title="静态获取"></a>静态获取</h3><pre><code>echo 开始设置ip和dns...::设置变量set name=&quot;WLAN&quot;set ipaddress=192.168.1.10set mask=255.255.255.0set gateway=192.168.1.1set dns=114.114.114.114set wins=8.8.8.8::主体部分echo 正在设置IP地址netsh interface ip set address name=%name% source=static addr=%ipaddress% mask=%mask% gateway=%gateway% echo 正在设置DNSnetsh interface ip set dns name=&quot;WLAN&quot; source=static addr=%dns%echo 正在设置备用DNSnetsh interface ip add dns &quot;WLAN&quot; addr=%wins% index2echo 设置完毕pause &gt;nul</code></pre><h3 id="动态获取"><a href="#动态获取" class="headerlink" title="动态获取"></a>动态获取</h3><pre><code>@echo offecho 自动获取IP地址....netsh interface ip set address name=&quot;WLAN&quot; source = dhcpecho 自动获取DNS服务器....netsh interface ip set dns name=&quot;WLAN&quot; source=dhcpecho 恭喜你，设置成功pause &gt;nul</code></pre><h2 id="将bat文件转为exe文件"><a href="#将bat文件转为exe文件" class="headerlink" title="将bat文件转为exe文件"></a>将bat文件转为exe文件</h2><ul><li>1、可借助第三方工具：bat to exe</li><li>2、通过自解压软件<ul><li>把.bat文件在到一个文件夹中</li><li>添加到压缩文件，以.exe为后缀名</li><li>在高级-&gt;高级自解压选项-&gt;设置解压路径-&gt;添加自动运行程序</li></ul></li></ul><h2 id="hack-常用命令"><a href="#hack-常用命令" class="headerlink" title="hack 常用命令"></a>hack 常用命令</h2><p><code>systeminfo</code> 查看系统信息<br><code>arp -a</code> 地址映射<br><code>net view</code> 查看局域网内其他计算机名称<br><code>ping -t -l 65550 ip</code> 死亡之ping:<br><code>shutdown -s -t 180 -c &quot;你被黑了，系统马上关机</code> 取消：<code>shutdown -a</code><br><code>msg username hello world</code> 给某用户发送信息<br><code>copy con 123.txt</code> 创建文件 ctrl+Z 回车保存<br><code>start 123.txt</code> 图形界面打开<br><code>type 123.txt</code> 在命令行查看文件<br><code>del 123.txt</code> 删除文件<br><code>tree</code> 树形结构<br><code>net use K: \\192.168.3.100\c$</code> 磁盘映射，内外网都可，防火墙会拦截<br><code>at 22:00 shutdown -s -t 180</code> 设置计划任务<br><code>at</code> 查看所有计划任务<br><code>at id号</code> 开启已注册的某个计划任务<br><code>at /delete</code> 停止所有计划任务，用参数/yes则不需要确认就直接停止<br><code>at id号 /delete</code> 停止某个已注册的计划任务</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 基本命令</title>
      <link href="/blog/2019/08/13/others/git-command/"/>
      <url>/blog/2019/08/13/others/git-command/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 10:58:09 GMT+0000 (Coordinated Universal Time) --><h2 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h2><h3 id="设置-git-全局邮箱和用户名"><a href="#设置-git-全局邮箱和用户名" class="headerlink" title="设置 git 全局邮箱和用户名"></a>设置 git 全局邮箱和用户名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="设置-ssh-key"><a href="#设置-ssh-key" class="headerlink" title="设置 ssh key"></a>设置 ssh key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看密钥是否存在</span><br><span class="line">ls ~/.ssh</span><br><span class="line"></span><br><span class="line"># 生成密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line"></span><br><span class="line"># 查看密钥，并把它复制到 github 或者 codding 等相关平台</span><br><span class="line">cat ~/.ssh/id_rsa_pub</span><br><span class="line"></span><br><span class="line"># 最后验证一下</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.codding.net   #或者 codding 平台</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">git add .</td><td align="left">将修改的代码添加到暂存区 (. 代表当前目录)</td></tr><tr><td align="left">git commit -m “message”</td><td align="left">将缓存区的内容添加到本地仓库</td></tr><tr><td align="left">git status</td><td align="left">查看当前暂存区状态</td></tr><tr><td align="left">git remote add origin 仓库地址</td><td align="left">添加远程仓库</td></tr><tr><td align="left">git push -u origin master</td><td align="left">把本地仓库推送到远程服务器</td></tr><tr><td align="left">git log [<option>]</option></td><td align="left">查看版本演变历史 option: <code>--all</code>（所有分支） <code>--graph</code>（图形化显示当前分支日志信息） <code>-nm</code>（m表示数字，显示当前分支最近m次的提交记录日志信息） <code>--oneline</code>（当前分支简要日志信息）</td></tr><tr><td align="left">git remote show [remote-name]</td><td align="left">查看某个远程仓库的详细信息，例如：git remote show origin</td></tr><tr><td align="left">git pull [<options>] [<repos>] [<refspec>…]</refspec></repos></options></td><td align="left">从一个仓库或本地分支拉取并且整合代码&lt;refspec&gt;表示分支的名字，options: <code>--allow-unrelated-histories</code>（允许无关历史）<code>-ff</code> <code>-no-ff</code> <code>-ff-only</code> ff (fast-forward) 表示快速合并</td></tr><tr><td align="left">git reset –merge</td><td align="left">回退</td></tr><tr><td align="left">git config –system –list</td><td align="left">查看系统config</td></tr><tr><td align="left">git config –global –list</td><td align="left">查看当前用户配置</td></tr><tr><td align="left">git config –local –list</td><td align="left">查看当前仓库配置信息</td></tr></tbody></table><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure><h3 id="修改远程仓库地址"><a href="#修改远程仓库地址" class="headerlink" title="修改远程仓库地址"></a>修改远程仓库地址</h3><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote origin -set-url [url]</span><br></pre></td></tr></table></figure><p>方法2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin [url]</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="连接超时错误"><a href="#连接超时错误" class="headerlink" title="连接超时错误"></a>连接超时错误</h3><p>出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li>打开 git 的安装目录中的 <code>etc/ssh/ssh_config</code> 文件，添加以下代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User youremail@qq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><ol start="2"><li>在 git 命令窗口中输入 <code>ssh -T git@gitub.com</code>，按照提示输入yes，最后会出现下面的提示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="系统换行符不同导致的警告"><a href="#系统换行符不同导致的警告" class="headerlink" title="系统换行符不同导致的警告"></a>系统换行符不同导致的警告</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in source/_posts/others/browser-rendering.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure><p>git 采用 linux（换行符为\n） 规范，若文件中存在\r\n符号，它会自动帮你转为 \n, 可使用下列命令消除警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config core.filemode false</span><br><span class="line">git config core.eol crlf</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
